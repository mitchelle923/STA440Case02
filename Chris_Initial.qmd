---
title: "Chris RMD"
author: "Chris Liang"
output: 
  pdf_document:
    latex_engine: xelatex
    keep_tex: true
    latex_args: ["-shell-escape"]
geometry: "top=15mm, bottom=15mm, left=15mm, right=15mm"
format: pdf
editor: visual
---

```{r}
#| echo : false
#| label: downloading-packages
#| message: false
#| include: false

library(tidyverse)
library(knitr)
library(stringr)
```


```{r}
#| echo : false
#| label: read-data
#| message: false
#| include: false

#make sure this is forked to github so it's not a local file path
earlydata <- read_csv("Cleaned Data/data_2017_2021.csv")
laterdata <- read_csv("Cleaned Data/data_2022_2023.csv")

#will not be using early dataset because it only contains data about female athletes
early <- earlydata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)

later <- laterdata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)
```

```{r}
#indonesian gymnast's name is Abiyu RAFI not ABIYURAFI
laterdata <- laterdata |>
  mutate(FirstName = ifelse(LastName == "ABIYURAFI" & FirstName == ".", "Abiyu", FirstName),
    LastName = ifelse(LastName == "ABIYURAFI", "RAFI", LastName))

laterdata <- laterdata |>
  mutate(Apparatus = if_else(Apparatus == 'hb', 'HB', Apparatus))


laterdata <- laterdata |>
  mutate(firstname_check = ifelse(str_length(FirstName) >= 3, 1, 0),
         lastname_check = ifelse(str_length(LastName) >= 3, 1, 0))

laterdata <- laterdata |>
  mutate(FirstName = ifelse(firstname_check == 0, paste0(FirstName, "_"), FirstName),
         LastName = ifelse(lastname_check == 0, paste0(LastName, "_"), LastName))

#based on string methods -- creating unique athlete IDs
laterdata <- laterdata |>
  mutate(unique_id = paste0(str_sub(FirstName, 1, 3), str_sub(LastName, 1, 3), "_", Country))

laterdata |>
  filter(Gender == "w",
         Country == "USA")

#create a vector for AA or team
AA_team <- c("AAfinal", "TeamFinal", "TeamQual", "AAqual")
'%notin%' <- function(x,y)!('%in%'(x,y))

finals_vector <- c("AAfinal", "TeamFinal", "final")
```



```{r}
#these quantiles are already grouped by gender and competition, round, apapratus, etc. so no bleeding
quantiled_data <- laterdata |>
  group_by(Gender, Competition, Round, Apparatus) |>
  mutate(quantile_20s = ntile(-Score, 5),
         quantile_10s = ntile(-Score, 10))

#filter out the athletes who have NEVER made it to a final, ever
filtered_data <- quantiled_data |>
  group_by(unique_id) |>
  filter(any(Round == "final" | Round == "TeamFinal" | Round == "AAfinal")) |>
  ungroup()

#summary of number of athletes competed in each competition in each round
number_athletes <- filtered_data |>
  group_by(Competition, Round) |>
  summarise(athletes_participated = n_distinct(unique_id))

number_athletes |>
  filter(Round %in% AA_team) |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "Distribution of Athletes Competed at Competition Rounds",
         subtitle = "All Around or Team All Arounds")

number_athletes |>
  filter(Round == "AAfinal") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "Distribution of Athletes Competed at AA Finals")

# at the oceania continental championships, only 10 unique athletes competed
# every other competition at each round has at minimum 36 athletes competing

number_athletes |>
  filter(Round == "final") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "Distribution of Athletes Competed at Final Rounds",
         subtitle = "Individual Apparatuses")


#at these final rounds, there are at least 40 athletes in each final, so it's fine

ggplot(number_athletes, aes(x = athletes_participated)) +
  geom_histogram() +
  labs(x = "Number of Unique Athletes Competed",
       y = "Frequency",
       title = "Distribution of Athletes Competed at Competitions")

#going to left join to show the number of athletes that participated per round

joined_data <- filtered_data |>
  left_join(number_athletes, by = c("Competition", "Round"))

#now the athletes_participated column = how many athletes competed in it


#this filters out the individual records for ppl who were not in top quantiles at a competition
final_data <- joined_data |>
  filter((athletes_participated <= 100 & quantile_20s == 1) | (athletes_participated > 100 & quantile_10s == 1) | (Competition == "Oceania Continental Championships 2023" & quantile_20s %in% c(1, 2)))

#now let's check the number of unique athletes left
final_data |>
  group_by(Country) |>
  summarise(athletes_left = n_distinct(unique_id))

#there are 679 athletes left in total once we have filtered, USA still has 91 left
```

## LATER QUAD

```{r}


#for only the apparatus events
top_20_apparatus_men <- laterdata |>
  filter(Gender == "m",
         Round %notin% AA_team) |>
  select(Apparatus, unique_id, Country, Date, Competition, Round, Score) |>
  group_by(Apparatus) |>
  arrange(desc(Score)) |>
  slice_max(order_by = Score, n = 20)

top_20_apparatus_women <- laterdata |>
  filter(Gender == "w",
         Round %notin% AA_team) |>
  select(Apparatus, unique_id, Country, Date, Competition, Round, Score) |>
  group_by(Apparatus) |>
  arrange(desc(Score)) |>
  slice_max(order_by = Score, n = 20)

#top_20_apparatus_men
```


```{r}
top_20_apparatus_men |>
  ggplot(aes(x = Country, fill = ifelse(Country == "USA", "Is USA", "Not USA"))) +
  geom_bar() + 
  scale_fill_manual(values = c("Is USA" = "red", "Not USA" = "grey50")) +
  theme(legend.position = "none") +
  facet_grid(~ Apparatus, scales = "free_x") + 
  coord_flip()
```


```{r}
apparatus_summary <- laterdata |>
  filter(Gender == "m") |>
  select(unique_id, Apparatus, Country, Date, Competition, Round, D_Score, E_Score, Score) |>
  group_by(Apparatus, Country) |>
  summarise(mean_difficulty = mean(D_Score),
            mean_execution = mean(E_Score),
            mean_overall = mean(Score)) |>
  slice_max(order_by = mean_overall, n = 10)

apparatus_summary
```

```{r}
apparatus_summary |>
  ggplot(aes(x = mean_overall, y = fct_reorder(Country, mean_overall), fill = ifelse(Country == "USA", "Is USA", "Not USA"))) +
  geom_col() +
  scale_fill_manual(values = c("Is USA" = "red", "Not USA" = "grey50")) +
  theme(legend.position = "none") +
  facet_grid(~ Apparatus, scales = "free_y")
```

```{r}
top_20_apparatus_men |>
  filter(Apparatus == "FX") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "FX Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "PH") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "PH Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "HB") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "HB Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "hb") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "hb Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "VT") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "VT Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "VT1") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "VT1 Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "VT2") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "VT2 Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "SR") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "SR Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_men |>
  filter(Apparatus == "PB") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "PB Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")
```


Thoughts: maybe give each athlete a Unique ID (for purposes of combining first and last name)
What to do about VT1, VT2 vs. just VT


```{r}
top_20_apparatus_women |>
  filter(Apparatus == "BB") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "BB Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_women |>
  filter(Apparatus == "VT") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "VT Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_women |>
  filter(Apparatus == "UB") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "UB Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_women |>
  filter(Apparatus == "VT1") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "VT1 Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")

top_20_apparatus_women |>
  filter(Apparatus == "VT2") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "VT2 Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")


top_20_apparatus_women |>
  filter(Apparatus == "FX") |>
  ggplot(aes(x = unique_id)) +
  geom_bar() +
  facet_wrap(~ Country, scales = "free_x") +
  labs(title = "FX Apparatus Top Athletes",
       subtitle = "# of Times an Athlete was in the Top 20 Scores")
```


## Trying out modeling


```{r}
# splitting the data by men and women

final_women <- final_data |>
  filter(Gender == "w")
# has 1522 observations
# and 291 unique athletes left

final_men <- final_data |>
  filter(Gender == "m")
# has 2518 observations
# has 390 unique athletes left

final_women |>
  ggplot(aes(x = Score)) +
  geom_histogram() +
  facet_grid(~ Apparatus)

final_men |>
  ggplot(aes(x = Score)) +
  geom_histogram() +
  facet_grid(~ Apparatus)

```

```{r}
final_women |>
  group_by(Apparatus) |>
  summarise(mean_score = mean(Score),
            var_score = var(Score),
            number_obs = n())
```



```{r}
# FOR BB, TRYING IT OUT
# Assuming you have your data in a variable `y`
# Set up the data
mean_y <-13.23694  # Mean of your data
var_y <- 0.4176740    # Variance of your data
n <- 373   # Number of data points

# Set up initial values
S <- 1000                  # Number of samples to draw
PHI <- matrix(nrow = S, ncol = 2)  # Matrix to store samples
PHI[1, ] <- phi <- c( mean_y, 1/var_y)
   # Initial values

# Set prior parameters (mu0, tau0 squared, nu0, s20)
#THIS IS SO FAKE IM JUST USING PRIORS FROM THE TEXTBOOK
mu0<- 1.9 ; t20 <- 0.95^2 ; s20 <- .01 ; nu0<-1

# Gibbs sampling
set.seed(1)   # For reproducibility
for (s in 2:S) {
    # Update theta (mu) from its full conditional
    mun <- (mu0 / t20 + n * mean_y * PHI[s - 1, 2]) / (1 / t20 + n * PHI[s - 1, 2])
    t2n <- 1 / (1 / t20 + n * PHI[s - 1, 2])
    PHI[s, 1] <- rnorm(1, mun, sqrt(t2n))

    # Update 1/sigma squared from its full conditional
    nun <- nu0 + n
    s2n <- (nu0 * s20 + (n - 1) * var_y + n * (mean_y - PHI[s, 1])^2) / nun
    PHI[s, 2] <- rgamma(1, nun / 2, nun * s2n / 2)
}

# PHI now contains the samples from the posterior

```

