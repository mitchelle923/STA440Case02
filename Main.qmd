---
title: "US Gymnastics Analysis"
author: "Chris, Enzo, Mitchelle, Zoe"
output: 
  pdf_document:
    latex_engine: xelatex
    keep_tex: true
    latex_args: ["-shell-escape"]
geometry: "top=15mm, bottom=15mm, left=15mm, right=15mm"
format: pdf
editor: visual
---

```{r}
#| echo : false
#| label: downloading-packages
#| message: false
#| include: false

library(tidyverse)
library(knitr)
library(stringr)
library(dplyr)
library(invgamma)
library(fitdistrplus)
library(kableExtra)
library(cowplot)
library(coda)
library(bayesplot)
library(rstan)  
```

```{r setup-chunk}
knitr::opts_chunk$set(message = FALSE, echo = FALSE) 
```

```{r}
#| echo : false
#| label: read-data
#| message: false
#| include: false

#make sure this is forked to github so it's not a local file path
earlydata <- read_csv("Cleaned Data/data_2017_2021.csv")
laterdata <- read_csv("Cleaned Data/data_2022_2023.csv")

#will not be using early dataset because it only contains data about female athletes
early <- earlydata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)

later <- laterdata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)
```

## Introduction

## Methodology

```{r}
#indonesian gymnast's name is Abiyu RAFI not ABIYURAFI
laterdata <- laterdata |>
  mutate(FirstName = ifelse(LastName == "ABIYURAFI" & FirstName == ".", "Abiyu", FirstName),
    LastName = ifelse(LastName == "ABIYURAFI", "RAFI", LastName),
    Apparatus = if_else(Apparatus == 'hb', 'HB', Apparatus))


laterdata <- laterdata |>
  mutate(firstname_check = ifelse(str_length(FirstName) >= 3, 1, 0),
         lastname_check = ifelse(str_length(LastName) >= 3, 1, 0))

laterdata <- laterdata |>
  mutate(FirstName = ifelse(firstname_check == 0, paste0(FirstName, "_"), FirstName),
         LastName = ifelse(lastname_check == 0, paste0(LastName, "_"), LastName))

#based on string methods -- creating unique athlete IDs
laterdata <- laterdata |>
  mutate(unique_id = paste0(str_sub(FirstName, 1, 3), str_sub(LastName, 1, 3), "_", Country))

#create a vector for AA or team
AA_team <- c("AAfinal", "TeamFinal", "TeamQual", "AAqual")
'%notin%' <- function(x,y)!('%in%'(x,y))

finals_vector <- c("AAfinal", "TeamFinal", "final")
```

```{r quantiling, message = FALSE}
#these quantiles are already grouped by gender and competition, round, apapratus, etc. so no bleeding
quantiled_data <- laterdata |>
  group_by(Gender, Competition, Round, Apparatus) |>
  mutate(quantile_20s = ntile(-Score, 5),
         quantile_10s = ntile(-Score, 10))

#filter out the athletes who have NEVER made it to a final, ever
filtered_data <- quantiled_data |>
  group_by(unique_id) |>
  filter(any(Round == "final" | Round == "TeamFinal" | Round == "AAfinal")) |>
  ungroup()

#summary of number of athletes competed in each competition in each round
number_athletes <- filtered_data |>
  group_by(Competition, Round) |>
  summarise(athletes_participated = n_distinct(unique_id))


# at the oceania continental championships, only 10 unique athletes competed
# every other competition at each round has at minimum 36 athletes competing
#at these final rounds, there are at least 40 athletes in each final, so it's fine
#going to left join to show the number of athletes that participated per round

joined_data <- filtered_data |>
  left_join(number_athletes, by = c("Competition", "Round"))

#now the athletes_participated column = how many athletes competed in it


#this filters out the individual records for ppl who were not in top quantiles at a competition
final_data <- joined_data |>
  filter((athletes_participated <= 100 & quantile_20s == 1) | (athletes_participated > 100 & quantile_10s == 1) | (Competition == "Oceania Continental Championships 2023" & quantile_20s %in% c(1, 2)))

#now let's check the number of unique athletes left
# final_data |>
#   group_by(Country) |>
#   summarise(athletes_left = n_distinct(unique_id))

#there are 679 athletes left in total once we have filtered, USA still has 91 left
```

```{r removing-obs, message = FALSE}
#summary stats for each athlete for each apparatus
combined_apparatus <- combined_final |>
  group_by(Apparatus, unique_id, Country, Gender) |>
  summarise(mean_score = mean(Score),
            var_score = var(Score),
            number_obs = n(),
            mean_D = mean(D_Score),
            var_D = var(D_Score),
            mean_E = mean(E_Score),
            var_E = var(E_Score)) |>
  filter(number_obs >= 3)

combined <- combined_final |>
  left_join(combined_apparatus, by = c("Apparatus", "unique_id", "Country", "Gender"))

# USE THIS DF FOR RUNNING SIMS
combined <- combined |>
  filter(!is.na(number_obs))

#combined now has 2689 obs instead of 4040 obs -- using this to run sims
```

## Simulations

```{r fitting-priors}
fit_normal_priors <- function(data, apparatus, gender) {
  #fitting normal prior for mean scores
  normal_mu_fit <- fitdist(data$mean_score, "norm")
  #fitting inv gamma prior for variance of scores
  invgamma_var_fit <- fitdist(data$var_score, "invgamma")
  
  m_0 <-  normal_mu_fit$estimate[[1]]
  sig_0 <- normal_mu_fit$estimate[[2]]
  k_0 <- invgamma_var_fit$estimate[[1]] 
  v_0 <- invgamma_var_fit$estimate[[2]]

  return(c(m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0))
}
```

```{r simulation-function}
#code for simulations, inspired by STA360/peter hoff textbook

analyze_athlete <- function(athlete_results, m_0, sig_0, k_0, v_0, smc = 1000) {
  n <- length(athlete_results)
  ybar <- mean(athlete_results)
  var <- var(athlete_results)
  
  #NEED TO CHECK THIS BAYESIAN
  k_n <- k_0 + n
  v_n <- v_0 + n
  m_n <- (k_0*m_0 + n*ybar)/k_n
  sig_n <- (v_0*sig_0 + (n-1)*var + k_0*n*(ybar - m_0)**2/k_n)/v_n
  sig_sample <- mean(rinvgamma(smc, v_n/2, sig_n*v_n/2))
  theta_sample <- mean(rnorm(smc, m_n, sqrt(sig_sample/k_n)))
  
  return(c(theta_sample, sig_sample))
}
```

```{r creating-medals}
# So this represents one simulation, we could probably run this like 1000 times and average out the medal counts
simulate_results <- function(data, apparatus, gender, m_0, sig_0, k_0, v_0, medals = TRUE) {
  simul_data <- data %>%
    filter(Apparatus == apparatus
           , Gender == gender) %>%
    group_by(unique_id) %>%
    summarise(mean_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[1],
              var_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[2],
              observations = n(), .groups = "keep") %>%
    rowwise() %>%
    mutate(simulated_Score = rnorm(1, mean_estimate, var_estimate)) %>% # Truncate scores > 10
    mutate(simulated_Score = ifelse(simulated_Score > 20, 10, simulated_Score)) %>% # Truncate scores < 0
    mutate(simulated_Score = ifelse(simulated_Score < 0, 0, simulated_Score)) 
  
  if (medals == TRUE) {
    # order by top 3 results and assign gold, silver, bronze
    simul_data <- simul_data %>%
      ungroup() %>%
      arrange(desc(simulated_Score)) %>%
      mutate(medal = case_when(row_number() == 1 ~ "Gold",
                               row_number() == 2 ~ "Silver",
                               row_number() == 3 ~ "Bronze",
                               TRUE ~ "NA"))
    
  }
  return(simul_data)
}
```

```{r competition-simulation }
# full competition simulation, gets pretty slow with 1000 simulations
simulate_full_competition <- function(data, apparatus, gender, mu_0, sig_0, k_0, v_0, smc) {
  athletes_medals <- data %>%
    dplyr::select(unique_id) %>%
    distinct() %>%
    mutate(Golds = 0, Silvers = 0, Bronzes = 0, Total_Medals = 0)
  
  for (i in 1:smc) {    
    big_simul <- simulate_results(data, apparatus, gender, mu_0, sig_0, k_0, v_0, TRUE) %>%
      filter(medal != "NA")
    
    big_simul <- big_simul %>%
      group_by(unique_id) %>%
      summarise(Golds = sum(medal == "Gold"),
                Silvers = sum(medal == "Silver"),
                Bronzes = sum(medal == "Bronze"),
                Total_Medals = sum(medal != "NA"),
                .groups = "keep") %>%
      ungroup()
    
    athletes_medals <- athletes_medals %>%
      left_join(big_simul, by = c("unique_id")) %>%
      mutate(Golds = ifelse(is.na(Golds.y), Golds.x, Golds.y + Golds.x),
             Silvers = ifelse(is.na(Silvers.y), Silvers.x, Silvers.y + Silvers.x),
             Bronzes = ifelse(is.na(Bronzes.y), Bronzes.x, Bronzes.y + Bronzes.x),
             Total_Medals = ifelse(is.na(Total_Medals.y), Total_Medals.x, Total_Medals.y + Total_Medals.x)) %>%
      dplyr::select(unique_id, Golds, Silvers, Bronzes, Total_Medals) %>%
      arrange(desc(Total_Medals))
  } 
  return(athletes_medals)
}
```

## Female Athletes' Results

```{r FX-womens-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "FX", "w"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

FX_w_simul <- simulate_full_competition(combined, "FX", "w", mu_0, sig_0, k_0, v_0, 500)

FX_w_simul |>
  head(10) |>
  kable(caption = "Women's Floor Exercise Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r BB-womens-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "BB", "w"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

BB_w_simul <- simulate_full_competition(combined, "BB", "w", mu_0, sig_0, k_0, v_0, 100)
BB_w_simul |>
  head(10) |>
  kable(caption = "Women's Balance Beam Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r VT-womens-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "VT", "w"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

VT_w_simul <- simulate_full_competition(combined, "VT", "w", mu_0, sig_0, k_0, v_0, 100)
VT_w_simul |>
  head(10) |>
  kable(caption = "Women's Vault Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r UB-women-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "UB", "w"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

UB_w_simul <- simulate_full_competition(combined, "UB", "w", mu_0, sig_0, k_0, v_0, 100)
UB_w_simul |>
  head(10) |>
  kable(caption = "Women's Uneven Bars Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

## Male Athletes' Results

```{r FX-men-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "FX", "m"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

FX_m_simul <- simulate_full_competition(combined, "FX", "m", mu_0, sig_0, k_0, v_0, 100)
FX_m_simul |>
  head(10) |>
  kable(caption = "Men's Floor Exercise Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r VT-men-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "VT", "m"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

VT_m_simul <- simulate_full_competition(combined, "VT", "m", mu_0, sig_0, k_0, v_0, 100)
VT_m_simul |>
  head(10) |>
  kable(caption = "Men's Vault Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r PH-men-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "PH", "m"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

PH_m_simul <- simulate_full_competition(combined, "PH", "m", mu_0, sig_0, k_0, v_0, 100)
PH_m_simul |>
  head(10) |>
  kable(caption = "Men's Pommel Horse Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r HB-men-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "HB", "m"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

HB_m_simul <- simulate_full_competition(combined, "HB", "m", mu_0, sig_0, k_0, v_0, 100)
HB_m_simul |>
  head(10) |>
  kable(caption = "Men's High Bar Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r SR-men-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "SR", "m"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

SR_m_simul <- simulate_full_competition(combined, "SR", "m", mu_0, sig_0, k_0, v_0, 100)
SR_m_simul |>
  head(10) |>
  kable(caption = "Men's Still Rings Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

```{r PB-men-sims}
set.seed(123)

prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "PB", "m"))
print(prior_parameters)

mu_0 <- prior_parameters[1]
sig_0 <- prior_parameters[2]
k_0 <- prior_parameters[3]
v_0 <- prior_parameters[4]

PB_m_simul <- simulate_full_competition(combined, "PB", "m", mu_0, sig_0, k_0, v_0, 100)
PB_m_simul |>
  head(10) |>
  kable(caption = "Men's Parallel Bars Simulation Results ", col.names = c("Athlete", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

### Objective 1: Choice of Medal Metric

```{r}
#LARGE WOMEN'S SIMULATION TABLE W/ ALL POSSIBLE MEDAL METRICS

#Creates country variable
FX_w_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", FX_w_simul$unique_id))
#adds medal weight variable
FX_w_simul$Medal_Weight <- (FX_w_simul$Golds*3) + (FX_w_simul$Silvers*2) + (FX_w_simul$Bronzes*1)
#adds apparatus to facet by later on in visuals
FX_w_simul$Apparatus <- "FX"


BB_w_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", BB_w_simul$unique_id))
BB_w_simul$Medal_Weight <- (BB_w_simul$Golds*3) + (BB_w_simul$Silvers*2) + (BB_w_simul$Bronzes*1)
BB_w_simul$Apparatus <- "BB"

VT_w_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", VT_w_simul$unique_id))
VT_w_simul$Medal_Weight <- (VT_w_simul$Golds*3) + (VT_w_simul$Silvers*2) + (VT_w_simul$Bronzes*1)
VT_w_simul$Apparatus <- "VT"

UB_w_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", UB_w_simul$unique_id))
UB_w_simul$Medal_Weight <- (UB_w_simul$Golds*3) + (UB_w_simul$Silvers*2) + (UB_w_simul$Bronzes*1)
UB_w_simul$Apparatus <- "UB"

#Joins all women's medal results table for facet wrapping

#HAVE TO EVENTUALLY ADD VT1 and VT2!!
tot_w_simul <- bind_rows(FX_w_simul,BB_w_simul, VT_w_simul, UB_w_simul)
tot_w_simul <- tot_w_simul %>% 
  mutate(USA = as.factor(ifelse(Country == "USA", TRUE, FALSE)))
tot_w_simul
```

```{r}
#LARGE MEN'S SIMULATION TABLE W/ ALL POSSIBLE MEDAL METRICS

#Creates country variable
FX_m_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", FX_m_simul$unique_id))
#adds medal weight variable
FX_m_simul$Medal_Weight <- (FX_m_simul$Golds*3) + (FX_m_simul$Silvers*2) + (FX_m_simul$Bronzes*1)
#adds apparatus to facet by later on in visuals
FX_m_simul$Apparatus <- "FX"

VT_m_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", VT_m_simul$unique_id))
VT_m_simul$Medal_Weight <- (VT_m_simul$Golds*3) + (VT_m_simul$Silvers*2) + (VT_m_simul$Bronzes*1)
VT_m_simul$Apparatus <- "VT"

PH_m_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", PH_m_simul$unique_id))
PH_m_simul$Medal_Weight <- (PH_m_simul$Golds*3) + (PH_m_simul$Silvers*2) + (PH_m_simul$Bronzes*1)
PH_m_simul$Apparatus <- "PH"

HB_m_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", HB_m_simul$unique_id))
HB_m_simul$Medal_Weight <- (HB_m_simul$Golds*3) + (HB_m_simul$Silvers*2) + (HB_m_simul$Bronzes*1)
HB_m_simul$Apparatus <- "HB"

SR_m_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", SR_m_simul$unique_id))
SR_m_simul$Medal_Weight <- (SR_m_simul$Golds*3) + (SR_m_simul$Silvers*2) + (SR_m_simul$Bronzes*1)
SR_m_simul$Apparatus <- "SR"

PB_m_simul$Country <- factor(sub(".+_([A-Z]+)", "\\1", PB_m_simul$unique_id))
PB_m_simul$Medal_Weight <- (PB_m_simul$Golds*3) + (PB_m_simul$Silvers*2) + (PB_m_simul$Bronzes*1)
PB_m_simul$Apparatus <- "PB"

#Joins all men's medal results table for facet wrapping

#HAVE TO EVENTUALLY ADD VT1 and VT2!!
tot_m_simul <- bind_rows(FX_m_simul, VT_m_simul,PH_m_simul, HB_m_simul,SR_m_simul, PB_m_simul)
tot_m_simul <- tot_m_simul %>% 
  mutate(USA = as.factor(ifelse(Country == "USA", TRUE, FALSE)))
tot_m_simul
```

```{r}
#WOMEN'S MEDAL METRICS VISUALS
#Prioritizing Gold Medals
ggplot(data = tot_w_simul, aes(x = USA, y = Golds, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Women's Simulated Gold Medals by Country (USA vs non-USA)", subtitle = "by Apparatus") +coord_flip()

#Prioritizing Total Medals
ggplot(data = tot_w_simul, aes(x = USA, y = Total_Medals, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Women's Simulated Total Medals by Country (USA vs non-USA)", subtitle = "by Apparatus") +coord_flip()

#Prioritizing Weighted Medals
ggplot(data = tot_w_simul, aes(x = USA, y = Medal_Weight, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Women's Simulated Weighted Medals by Country (USA vs non-USA)", subtitle = "by Apparatus") +coord_flip()
```

```{r}
#MEN'S MEDAL METRICS VISUALS
#Prioritizing Gold Medals
ggplot(data = tot_m_simul, aes(x = USA, y = Golds, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Men's Simulated Gold Medals by Country (USA vs non-USA)", subtitle = "by Apparatus") +coord_flip()

#Prioritizing Total Medals
ggplot(data = tot_m_simul, aes(x = USA, y = Total_Medals, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Men's Simulated Total Medals by Country (USA vs non-USA)", subtitle = "by Apparatus") +coord_flip()

#Prioritizing Weighted Medals
ggplot(data = tot_m_simul, aes(x = USA, y = Medal_Weight, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Men's Simulated Weighted Medals by Country (USA vs non-USA)", subtitle = "by Apparatus") +coord_flip()

```

## Discussion

## Appendix

```{r}
number_athletes |>
  filter(Round %in% AA_team) |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "1) Distribution of Athletes Competed at Competition Rounds",
         subtitle = "All Around or Team All Arounds")

number_athletes |>
  filter(Round == "AAfinal") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "2) Distribution of Athletes Competed at AA Finals")

number_athletes |>
  filter(Round == "final") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "3) Distribution of Athletes Competed at Final Rounds",
         subtitle = "Individual Apparatuses")

ggplot(number_athletes, aes(x = athletes_participated)) +
  geom_histogram() +
  labs(x = "Number of Unique Athletes Competed",
       y = "Frequency",
       title = "4) Distribution of Athletes Competed at Competitions")

```

### Diagnostics

```{r}
#MCMC diagnostic check
get_mcmc_samples <- function(simulation_results) {
  mcmc_data <- as.mcmc(simulation_results$Total_Medals)
  return(mcmc_data)
}

mcmc_results <- simulate_full_competition(combined, "FX", "w", mu_0, sig_0, k_0, v_0, 100)
mcmc_samples <- get_mcmc_samples(mcmc_results)

traceplot(mcmc_samples, main = "Trace Plot of Total Medals")

# Effective sample size
effectiveSize(mcmc_samples)
#A common rule of thumb is that an effective sample size should be at least 1% or 5% of the total number of samples, depending on the context.

# Autocorrelation plot
autocorr.plot(mcmc_samples)

mcmc_samples <- get_mcmc_samples(mcmc_results)

# Histogram of MCMC samples
hist(mcmc_samples, main = "Histogram of Total Medals", xlab = "Total Medals")

```

```{r}
# Diagnositcs for Women

# Summary stats for total w medals
mcmcTrace <- mcmc(tot_w_simul$Total_Medals)
summary(mcmcTrace)

# Acceptance rate for total w medals
acceptanceRate <- 1 - rejectionRate(mcmcTrace)
acceptanceRate

# Effective size for total w medals
effectiveSize(mcmcTrace)

# Mixing total w medals
plot(mcmcTrace)

autocorr.plot(mcmcTrace)

# Diagnostics For Men

# Summary stats for total w medals
mcmcTrace1 <- mcmc(tot_m_simul$Total_Medals)
summary(mcmcTrace1)

# Acceptance rate for total w medals
acceptanceRate <- 1 - rejectionRate(mcmcTrace1)
acceptanceRate

# Effective size for total w medals
effectiveSize(mcmcTrace1)

# Mixing total w medals
plot(mcmcTrace1)

autocorr.plot(mcmcTrace1)
```

### Referenced in Results

```{r}
#WOMEN
#Top 5 athletes by apparatus for gold count
tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 5)

#Top 5 athletes by apparatus for total medal count
tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Total_Medals, n = 5)

#Top 5 athletes by apparatus for weighted medal count
tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Medal_Weight, n = 5)


#total proportion for each medal metric
tot_w_simul %>% 
  group_by(USA) %>% 
  summarise(sumGolds = sum(Golds))

tot_w_simul %>% 
  group_by(USA) %>% 
  summarise(sumTot = sum(Total_Medals))

tot_w_simul %>% 
  group_by(USA) %>% 
  summarise(sumWeighted = sum(Medal_Weight))
```

**Image 5)** For the women's simulation when looking at the top 5 athletes by:

*Gold Medal Count* for each apparatus there are 11 out of 20 from the US: balance beam (BB): 2, floor exercise (FX): 3, uneven bars (UB): 2, and vault (VT): 4

USA makes up 58% of the total women's gold medals in the simulation.

*Total Medal Count* for each apparatus there are 10 out of 20 from the US: balance beam (BB): 2, floor exercise (FX): 2, uneven bars (UB): 2, vault (VT): 4

USA makes up 49% of the total women's medals in the simulation.

*Weighted Medal Count* for each apparatus there are 9 out of 20 from the US: balance beam (BB): 2, floor exercise (FX): 2, uneven bars (UB): 2, vault (VT): 3

USA makes up 52% of the weight of women's medals in the simulation.

```{r}
#MEN
#Top 5 athletes by apparatus for gold count
tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 5)

#Top 5 athletes by apparatus for total medal count
tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Total_Medals, n = 5)

#Top 5 athletes by apparatus for weighted medal count
tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Medal_Weight, n = 5)

#total proportion for each medal metric
tot_m_simul %>% 
  group_by(USA) %>% 
  summarise(sumGolds = sum(Golds))

tot_m_simul %>% 
  group_by(USA) %>% 
  summarise(sumTot = sum(Total_Medals))

tot_m_simul %>% 
  group_by(USA) %>% 
  summarise(sumWeighted = sum(Medal_Weight))
```

**Image 6)** For the men's simulation when looking at the top 5 athletes by:

*Gold Medal Count* for each apparatus there are 5 out of 30 from the US: floor exercise (FX): 0, high bar (HB): 0,parallel bars (PB): 3 pommel horse (PH): 0, still rings (SR): 0, vault (VT): 2

USA makes up 23% of the total men's gold medals in the simulation.

*Total Medal Count* for each apparatus there are 3 out of 30 from the US: floor exercise (FX): 1, high bar (HB): 0, parallel bars (PB): 0, pommel horse (PH): 0, still rings (SR): 0, vault (VT): 2

USA makes up 25% of the total men's medals in the simulation.

*Weighted Medal Count* for each apparatus there are 5 out of 30 from the US: floor exercise (FX): 1, high bar (HB): 0, parallel bars (PB): 1, pommel horse (PH): 0, still rings (SR): 0, vault (VT): 3

USA makes up 24% of the weight of men's medals in the simulation.
