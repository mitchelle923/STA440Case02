---
title: "Journey to Paris 2024: A Bayesian Approach to Finding the Best Men's and Women's U.S. Gymnastics Teams"
author: "Chris Liang, Enzo Moraes Mescall, Mitchelle Mojekwu, Zoe Svec"
output: 
  pdf_document:
    latex_engine: xelatex
    keep_tex: true
    latex_args: ["-shell-escape"]
geometry: "top=12mm, bottom=12mm, left=12mm, right=12mm"
format: pdf
fontsize: 10pt
editor: visual
---

\vspace{-20truemm}

```{r setup-chunk, include = FALSE}
knitr::opts_chunk$set(message = FALSE, echo = FALSE) 
```

```{r}
#| echo: false
#| include: false
#| label: downloading-packages
#| message: false

library(tidyverse)
library(knitr)
library(stringr)
library(dplyr)
library(invgamma)
library(fitdistrplus)
library(kableExtra)
library(cowplot)
library(coda)
library(bayesplot)
library(rstan)  
```

```{r}
#| echo : false
#| label: read-data
#| message: false
#| include: false

#make sure this is forked to github so it's not a local file path
earlydata <- read_csv("Cleaned Data/data_2017_2021.csv")
laterdata <- read_csv("Cleaned Data/data_2022_2023.csv")

#will not be using early data set because it only contains data about female athletes
early <- earlydata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)

later <- laterdata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)
```

# Introduction

The Olympic Games are a highly anticipated world-renowned multi-sporting event that takes place every four years. Particularly the Summer Olympic Games tend to have a wider variety of 32 sports and more viewers than that of the Winter Olympics (Olympics, 2021). Athletes from all over the world can participate granted they meet the criteria established by their nation's Olympic committees and the international sports federations. With female qualifying gymnasts from the United States placing with medals in the team all-around, individual all-around, and each individual apparatus in the 2020 Tokyo Olympics game, there has been a surge in media attention on the United States gymnastics teams (Olympics, 2020).

As the Paris 2024 Summer Olympic Games is approaching, the United States Olympic Men's and Women's Artistic Gymnastics aims to put together a team of 5 each that best represents the country on the world's sporting stage by optimizing medal success amongst the team all-around, individual all-around, and individual apparatus events. At the Paris Olympics, there are specific rules about the number of athletes and countries allowed to compete in the events, the low number of athletes that qualify for the finals suggests there must be thoughtful crafting of the team of 5 (UCSAS, 2023). This study aims to use the most recent Olympic Games and other world competitions' qualifying and final round results data to best assemble a team that is likely to produce optimal success in terms of medals within the Olympic qualifiers and final criteria (UCSAS, 2023).

The UConn Sports Analytics Symposium provisioned two data sets on results of teams worldwide that participated in major gymnastic competitions betweeen 2021-2023. Observations were gathered at the athlete/apparatus level scores. It is worth noting, that the data from the 2021 Tokyo Olympics only include results for women's gymnastics, while the data from 2022-2023 include results for both men's and women's gymnastics, so we will not be proceeding with the Tokyo Olympics dataset (further age-based reasoning of not using the Tokyo dataset in Appendix). The data are collected from the results on each corresponding competition's official website. Variables in the data sets include athlete name and gender, country, date of competition, competition, round (qualifier or final of an individual apparatus, individual all-around, or team event), location, apparatus (women compete in "BB": balance beam, "FX": floor exercise, "UB": uneven bars, and "VT": vault; men compete in "FX" and "VT", then HB": high bar, "PB": parallel bars, "PH": pommel horse, "SR": still rings), the execution score, difficulty score, penalty, and final score for that athlete on that apparatus, and the rank of that athlete.

We have the following objectives for this study: (UCSAS, 2023)

1)  Decide on whether to maximize total medal count, gold medal count, or a weighted medal count

2)  Decide on whether to value the medals of an event (team, individual all-around, individual apparatus) over others.

3)  Decide on whether Team USA should maximize its total medal count by selecting a team of five gymnasts who are all-around gymnasts, event specialists (gymnasts who focus on 1 or more apparatus but not all apparatus), or a combination of those.

4)  Identify the group of five athletes who will most likely enable the Team USA Olympic Men's and Women's Artistic Gymnastics team to maximize medals won in the Paris 2024 Summer Olympics.

Addressing these objectives will assist the national Olympic Artistic Gymnastics teams in best approaching the Olympic gymnastics events in totality by offering recommended strategies to best approach team selection. In our analysis of the best fit US male and female gymnastics teams for the Paris Olympics, we will undertake a Bayesian approach to simulate outcomes of individual athletes' scores in an apparatus. Bayesian frameworks in sports analytics to simulate athlete's results are well-documented and have seen a rise in popularity in the past decade (Santos-Fernandez, et. al., 2019)--for instance, a Bayesian time series regression model to predict winning time distributions and the probability of winning for swimming in the 2020 and 2024 Olympics (Wu, et.al., 2021). We will build upon these analyses and choose the appropriate Bayesian method to simulate outcomes of gymnast results in each apparatus, after which we will analyze the top performers in each apparatus, assign medals, and find the best combination of athletes.

### Exploratory Data Visualizations

We find that from the density plots of male and female athletes' overall scores per apparatus that the scores are approximately normally distributed for the apparatuses for both genders. There are some slight deviations from normality; nonetheless, the approximate normality of the distribution of athlete's scores by apparatus informs our Bayesian approach. Furthermore, we plotted the number of athletes per country with the 10 highest average scores for each apparatus internationally. These plots help inform us of if we should be thinking about specialists or generalists in the US team combinations. We see that the top 10 for each apparatus have a high concentration of US female gymnasts, so we may want specialists in our team makeup, whereas that case does not transfer to the US male gymnasts, as there are few US male gymnasts in the top 10 for the floor exercise, high bar, pommel horse, and still rings apparatuses. This is discussed further in the results section.

```{r data-cleaning, message = FALSE}
#indonesian gymnast's name is Abiyu RAFI not ABIYURAFI
laterdata <- laterdata |>
  mutate(FirstName = ifelse(LastName == "ABIYURAFI" & FirstName == ".", "Abiyu", FirstName),
    LastName = ifelse(LastName == "ABIYURAFI", "RAFI", LastName),
    FirstName = ifelse(LastName == "CLENAGHAN" & FirstName == "Mc Rhys", "Rhys", FirstName),
    LastName = ifelse(LastName == "CLENAGHAN" | LastName == "MC CLENAGHAN", "MCCLENAGHAN", LastName),
    LastName = ifelse(LastName == "SOUD", "ABU AL SOUD", LastName),
    FirstName = ifelse(FirstName == "Ahmad Abu Al", "Ahmad", FirstName),
    Apparatus = if_else(Apparatus == 'hb', 'HB', Apparatus)) |>
  mutate(Country = ifelse(LastName == "MCCLENAGHAN", "IRL", Country),
         LastName = ifelse(LastName %in% c("HOCK", "HOECK"), "HÃ–CK", LastName),
         FirstName = ifelse(LastName == "SHIAO" & FirstName == "Yu", "Yu-Jan", FirstName)) |>
  mutate(FirstName = ifelse(LastName == "SHIAO" & FirstName == "Yu Jan", "Yu-Jan", FirstName)) |>
  mutate(FirstName = ifelse(LastName == "LIN" & FirstName == "Yi", "Yi-Chen", FirstName)) |>
  mutate(FirstName = ifelse(LastName == "LIN" & FirstName == "Yi Chen", "Yi-Chen", FirstName)) |>
  mutate(FirstName = ifelse(LastName == "LIAO" & FirstName == "Yi Chun", "Yi-Chun", FirstName))


laterdata <- laterdata |>
  mutate(firstname_check = ifelse(str_length(FirstName) >= 3, 1, 0),
         lastname_check = ifelse(str_length(LastName) >= 3, 1, 0))

laterdata <- laterdata |>
  mutate(FirstName = ifelse(firstname_check == 0, paste0(FirstName, "_"), FirstName),
         LastName = ifelse(lastname_check == 0, paste0(LastName, "_"), LastName))

#based on string methods -- creating unique athlete IDs
laterdata <- laterdata |>
  mutate(unique_id = paste0(str_sub(FirstName, 1, 3), str_sub(LastName, 1, 3), "_", Country))

#create a vector for AA or team
AA_team <- c("AAfinal", "TeamFinal", "TeamQual", "AAqual")
'%notin%' <- function(x,y)!('%in%'(x,y))

finals_vector <- c("AAfinal", "TeamFinal", "final")

#basically take the highest vault if there's a VT1 and VT2 since the vaults need to be different, and you would perform the harder/higher vault in the final

mutated_data <- laterdata |>
  filter(Apparatus %notin% c("VT1", "VT2"))

vaults_set <- laterdata |>
  filter(Apparatus %in% c("VT1", "VT2")) |>
  group_by(unique_id, Competition, Round, Apparatus, Gender, FirstName, LastName, Date, Location, Rank, Country, firstname_check, lastname_check) |>
  summarise(
    Score = max(Score, na.rm = TRUE),
    E_Score = E_Score[which.max(Score)],
    D_Score = D_Score[which.max(Score)],
    Penalty = Penalty[which.max(Score)],
    .groups = 'drop'
  ) |>
  mutate(Apparatus = ifelse(Apparatus == "VT1", "VT", "VT"))

#need to join the vaults set back with og data

laterdata <- mutated_data |>
  left_join(vaults_set)

#now there are no more VT1s or VT2s --> down to 18423 obs

```

```{r quantiling, message = FALSE}
#these quantiles are already grouped by gender and competition, round, apapratus, etc. so no bleeding
quantiled_data <- laterdata |>
  group_by(Gender, Competition, Round, Apparatus) |>
  mutate(quantile_20s = ntile(-Score, 5),
         quantile_10s = ntile(-Score, 10))

#filter out the athletes who have NEVER made it to a final, ever
filtered_data <- quantiled_data |>
  group_by(unique_id) |>
  filter(any(Round == "final" | Round == "TeamFinal" | Round == "AAfinal")) |>
  ungroup()

#summary of number of athletes competed in each competition in each round
number_athletes <- filtered_data |>
  group_by(Competition, Round) |>
  summarise(athletes_participated = n_distinct(unique_id))


# at the oceania continental championships, only 10 unique athletes competed
# every other competition at each round has at minimum 36 athletes competing
#at these final rounds, there are at least 40 athletes in each final, so it's fine
#going to left join to show the number of athletes that participated per round

joined_data <- filtered_data |>
  left_join(number_athletes, by = c("Competition", "Round"))

#now the athletes_participated column = how many athletes competed in it


#this filters out the individual records for ppl who were not in top quantiles at a competition
final_data <- joined_data |>
  filter((athletes_participated <= 100 & quantile_20s == 1) | (athletes_participated > 100 & quantile_10s == 1) | (Competition == "Oceania Continental Championships 2023" & quantile_20s %in% c(1, 2)))

#now let's check the number of unique athletes left
# final_data |>
#   group_by(Country) |>
#   summarise(athletes_left = n_distinct(unique_id))

#there are 679 athletes left in total once we have filtered, USA still has 91 left
```

```{r removing-obs, message = FALSE}
#summary stats for each athlete for each apparatus
combined_apparatus <- final_data |>
  group_by(Apparatus, unique_id, Country, Gender) |>
  summarise(mean_score = mean(Score),
            var_score = var(Score),
            number_obs = n(),
            mean_D = mean(D_Score),
            var_D = var(D_Score),
            mean_E = mean(E_Score),
            var_E = var(E_Score)) |>
  filter(number_obs >= 3)

combined <- final_data |>
  left_join(combined_apparatus, by = c("Apparatus", "unique_id", "Country", "Gender"))

# USE THIS DF FOR RUNNING SIMS
combined <- combined |>
  filter(!is.na(number_obs))

#combined now has 2210 obs instead of 4040 obs -- using this to run sims
```

```{r score-distributions}

#womens score distributions by apparatus
womensdist <- combined |>
  filter(Gender == "w") |>
  ggplot(aes(x = Score)) +
  geom_density() +
  facet_wrap(~ Apparatus) +
   labs(title = "Distribution of Female Gymnasts' Overall Scores",
       subtitle = "By Apparatus",
       x = "Overall Score",
       y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))


#mens score distributions by apparatus
mensdist <- combined |>
  filter(Gender == "m") |>
  ggplot(aes(x = Score)) +
  geom_density() +
  facet_wrap(~ Apparatus) +
   labs(title = "Distribution of Male Gymnasts' Overall Scores",
       subtitle = "By Apparatus",
       x = "Overall Score",
       y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(size = 7),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))
```

```{r top-10-athletes, fig.height = 5.25, fig.width = 6.5}
top_10_f_means <- combined_apparatus |>
  filter(Gender == "w") |>
  group_by(Apparatus, unique_id) |>
  arrange(Apparatus, desc(mean_score)) |>
  group_by(Apparatus) |>
  slice_head(n = 10) |>
  ungroup()

topwomens <- top_10_f_means |>
  ggplot(aes(x = Country, fill = ifelse(Country == "USA", "Is USA", "Not USA"))) +
  geom_bar() + 
  scale_fill_manual(values = c("Is USA" = "red", "Not USA" = "grey50")) +
  labs(title = "Number of Female Athletes in Top 10 of Each Apparatus",
       subtitle = "By Athlete's Mean Apparatus Score and Country",
       x = "Country the Athlete Represents",
       y = "Number of Female Athletes in Top 10 of Each Apparatus") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 7),
        plot.subtitle = element_text(size = 6),
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 6)) +
  facet_wrap(~ Apparatus, scales = "free_x") + 
  coord_flip()


top_10_m_means <- combined_apparatus |>
  filter(Gender == "m") |>
  group_by(Apparatus, unique_id) |>
  arrange(Apparatus, desc(mean_score)) |>
  group_by(Apparatus) |>
  slice_head(n = 10) |>
  ungroup()

topmens <- top_10_m_means |>
  ggplot(aes(x = Country, fill = ifelse(Country == "USA", "Is USA", "Not USA"))) +
  geom_bar() + 
  scale_fill_manual(values = c("Is USA" = "red", "Not USA" = "grey50")) +
  labs(title = "Number of Male Athletes in Top 10 of Each Apparatus",
       subtitle = "By Athlete's Mean Apparatus Scores and Country",
       x = "Country the Athlete Represents",
       y = "Number of Male Athletes in Top 10 of Each Apparatus") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 7),
        plot.subtitle = element_text(size = 6),
        axis.text = element_text(size = 5),
        axis.title = element_text(size = 6)) +
  facet_wrap(~ Apparatus, scales = "free_x") + 
  coord_flip()

plot_grid(womensdist, mensdist, topwomens, topmens, ncol=2, rel_heights = c(1.1, 2))
```

# Methodology

Prior to conducting simulations, we cleaned our data set on the 2022-2023 gymnastics competition results. Our data set cleaning semantics--wording, combining observations, etc. are in the appendix. We then proceeded to minimize the number of observations in our data set because we felt that it was unnecessary to simulate scores for athletes that had little to no chance of ever medaling in the Olympics given their previous records. To filter the observations, we first removed any individual athletes entirely who had never made the finals in any event in any competition in the data set. Afterward, we created quantiles of 20% increments and 10% increments for each round in a competition for each apparatus, separated by gender because men and women compete separately. We checked the number of unique athletes that competed at each competition in each round (see Appendix), and found that for all rounds in competitions other than the Oceania Championships, at least 36 unique athletes participated. For some rounds, hundreds of athletes participated--so we decided to filter for: if more than 100 athletes competed in a round in an apparatus, then we filtered for athletes' scores in the top 10%; if less than 100 athletes competed in a round in an apparatus, then we filtered for athletes' scores in the top 20%; for the Oceania Championships, we filtered for the top 40% (four athletes). The reason we adopted a quantile-based filtering approach is because of the variation in number of athletes who competed at different competitions, so simply taking the top 20 athletes, for example, of each competition may not account for that variation. Our last method of filtering was to remove observations of athletes' scores for apparatuses if an athlete had not competed more than twice in that apparatus in the entire 2022-2023 data set. Our rationale was that there were 37 distinct competitions in the data set, so if an athlete has not competed more than twice in the past two years in an apparatus, they are likely not that active in that apparatus. At this point, the issue arises that a plurality of athletes has only ever done a single competition in any given apparatus, resulting in a large number of athletes with 0 variances and skewing the distribution. Due to the unlikely nature of athletes who do not compete regularly participating in the Olympics, we have decided to truncate the apparatus level data set to exclude athletes with less than three competition appearances for that given apparatus. We are left with 2210 observations in our filtered data set to conduct simulations, with 157 unique male athletes and 88 unique female athletes.

## Bayesian Monte Carlo Approach

In this study, we present a Bayesian statistical Monte Carlo approach to select the top male and female American gymnast candidates for participation in the 2024 Olympics. Our method involves the creation of prior distributions based on general historical performance data, conditioning these distributions on individual competition results, and simulating medal outcomes by predicting scores for each gymnast in each apparatus event. This approach incorporates both prior beliefs and observed data to make informed predictions about athletes' performances in simulated events (Hoff, 2009). Utilizing Bayes' law for probability density functions, where $x$ is a vector of all the data from an apparatus and gender combination, $x_i$ represents the vector of observed data for athlete $i$, and $\theta$ represents the parameters of the distribution we will be using to model the competition. We are under the assumption that all gymnastic scores are independent and identically distributed for every athlete and that every athlete's scores come from the same distribution type. Furthermore, for modeling purposes, we assume a common prior $p(x| \theta)$ for all athletes such that $p(x_i | \theta) = p(x| \theta)$ for all $i$. Our posterior distribution is:

$$
p(\theta |x_i) \propto p(x| \theta) p(\theta)
$$

To simulate a score for an athlete we sample $\theta^{(s)} \sim p(\theta | x_i)$ from the posterior and then sample $\tilde{x_i} \sim p(x| \theta^{(s)})$. This represents a new predicted data point for athlete $i$, a common practice for estimating values from a posterior predictive distribution in Bayesian Monte Carlo Simulations (Hoff, 2009). Thus, given we can simulate an athlete's scores, we can then simulate a competition between all candidate athletes and allocate gold, silver, and bronze medals to the top three athletes.

#### Prior Distribution Creation and Conditioning on Individual Results

We began by creating prior distributions for each apparatus' total score. See Exploratory Data Visualizations for the apparatus-gender level distribution. Various distributions were considered, but the normal distribution was chosen for ease of use and effective fit with low standard errors and p-values < 0.01. We depended on conjugacy to derive the parameters of the normal distribution. Since both the mean and variance of the normal distribution are unknown, we used a normal-inverse gamma prior.

To estimate prior parameters, we fit a normal distribution to the distribution of athletes' means and an inverse-gamma distribution to athletes' variances. We used the maximum likelihood method in the `fitdist()` function (Muller, 2023). The maximum likelihood estimates  were then used as the prior parameters for the normal-inverse gamma distribution. This process was done independently for all apparatuses and genders. Following the establishment of the prior distributions, we updated these distributions based on individuals' competition results. We rely on existing literature for the formulas for the posterior parameters (Hoff, 2009). We then employ a Monte Carlo method to sample new data, simulating the posterior parameters for mean and variance and then using these to simulate individual gymnastic scores. See posterior predictive checks section in appendix for quality of fit.

#### Simulation of Gymnastics Events

To simulate gymnastics events, we performed 500 iterations for each apparatus event, resulting in about 11 million simulated scores. For every iteration, we sampled a score for each athlete, $\tilde{x_i}$, from the posterior normal distribution. Furthermore, we truncated the normal distribution at 0 and 20 to reflect the scoring system. We then ranked the athletes by their simulated scores and awarded gold, silver, and bronze medals to the top three athletes. Notably, we chose not to go with a qualification structure and had a simple one-shot round for victory. This decision was made due to computational constraints and was accounted for when identifying Team USA athletes.

#### Assumptions

We assume that gymnastic scores are normally distributed and conditionally independent on the athlete. Additionally, we assume independence between apparatus, allowing us to treat each apparatus event as a separate and identically distributed random variable. We also assumed that athletes prioritize all stages of every event identically. Furthermore, we assume that historical performance data adequately represents the gymnasts' true abilities and that changing age is not a factor in gymnastic ability. While this assumption simplifies the modeling process, it may not fully capture the complexities of individual development and improvements over time.

```{r fitting-priors}
fit_normal_priors <- function(data, apparatus, gender) {
  #fitting normal prior for mean scores
  normal_mu_fit <- fitdist(data$mean_score, "norm")
  #fitting inv gamma prior for variance of scores
  invgamma_var_fit <- fitdist(data$var_score, "invgamma")
  
  m_0 <-  normal_mu_fit$estimate[[1]]
  sig_0 <- normal_mu_fit$estimate[[2]]
  k_0 <- invgamma_var_fit$estimate[[1]] 
  v_0 <- invgamma_var_fit$estimate[[2]]

  return(c(m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0))
}
```

```{r simulation-function}
#code for simulations, inspired by STA360/peter hoff textbook

analyze_athlete <- function(athlete_results, m_0, sig_0, k_0, v_0) {
  n <- length(athlete_results)
  ybar <- mean(athlete_results)
  var <- var(athlete_results)
  
  #NEED TO CHECK THIS BAYESIAN
  k_n <- k_0 + n
  v_n <- v_0 + n
  m_n <- (k_0*m_0 + n*ybar)/k_n
  sig_n <- (v_0*sig_0 + (n-1)*var + k_0*n*(ybar - m_0)**2/k_n)/v_n
  sig_sample <- rinvgamma(1, v_n/2, sig_n*v_n/2)
  theta_sample <- rnorm(1, m_n, sqrt(sig_sample/k_n))
  
  return(c(theta_sample, sig_sample))
}

old_analyze_athlete <- function(athlete_results, m_0, sig_0, k_0, v_0, smc = 1000) {
  n = length(athlete_results)
  ybar = mean(athlete_results)
  
  if (is.na(var(athlete_results))) {
    var = 0
  } else {
    var = var(athlete_results) 
  }
  
  k_n = k_0 + n
  v_n = v_0 + n
  m_n = (k_0*m_0 + n*ybar)/k_n
  sig_n = (v_0*sig_0 + (n-1)*var + k_0*n*(ybar - m_0)**2/k_n)/v_n
  sig_sample = mean(rinvgamma(smc, v_n/2, sig_n*v_n/2))
  theta_sample = mean(rnorm(smc, m_n, sqrt(sig_sample/k_n)))
  
  return(c(theta_sample, sig_sample))
}
```

```{r creating-medals}
# So this represents one simulation, we could probably run this like 500 times and average out the medal counts
simulate_results <- function(data, apparatus, gender, m_0, sig_0, k_0, v_0, medals = TRUE) {
  simul_data <- data %>%
    filter(Apparatus == apparatus
           , Gender == gender) %>%
    group_by(unique_id) %>%
    summarise(mean_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[1],
              var_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[2], .groups = "keep") %>%
    rowwise() %>%
    mutate(simulated_Score = rnorm(1, mean_estimate, var_estimate)) %>% # Truncate scores > 10
    #mutate(simulated_Score = ifelse(simulated_Score > 20, 10, simulated_Score)) %>% # Truncate scores < 0
    #mutate(simulated_Score = ifelse(simulated_Score < 0, 0, simulated_Score)) %>% Ignoring truncation since if somebody gets a 20 they'll get the medal anyways
    ungroup() %>%
    arrange(desc(simulated_Score)) %>%
    mutate(medal = case_when(row_number() == 1 ~ "Gold",
                             row_number() == 2 ~ "Silver",
                             row_number() == 3 ~ "Bronze",
                             TRUE ~ "NA"))
  return(simul_data)
}
```

```{r competition-simulation }
# full competition simulation, gets pretty slow with 500 simulations
simulate_full_competition <- function(data, apparatus, gender, mu_0, sig_0, k_0, v_0, smc) {
  athletes_medals <- data %>%
    dplyr::select(unique_id) %>%
    distinct() %>%
    mutate(Golds = 0, Silvers = 0, Bronzes = 0, Total_Medals = 0)
  
  for (i in 1:smc) {    
    big_simul <- simulate_results(data, apparatus, gender, mu_0, sig_0, k_0, v_0, TRUE) %>%
      filter(medal != "NA") %>%
      group_by(unique_id) %>%
      summarise(Golds = sum(medal == "Gold"),
                Silvers = sum(medal == "Silver"),
                Bronzes = sum(medal == "Bronze"),
                Total_Medals = sum(medal != "NA"),
                .groups = "keep") %>%
      ungroup()
    
    athletes_medals <- athletes_medals %>%
      left_join(big_simul, by = c("unique_id")) %>%
      mutate(Golds = ifelse(is.na(Golds.y), Golds.x, Golds.y + Golds.x),
             Silvers = ifelse(is.na(Silvers.y), Silvers.x, Silvers.y + Silvers.x),
             Bronzes = ifelse(is.na(Bronzes.y), Bronzes.x, Bronzes.y + Bronzes.x),
             Total_Medals = ifelse(is.na(Total_Medals.y), Total_Medals.x, Total_Medals.y + Total_Medals.x)) %>%
      dplyr::select(unique_id, Golds, Silvers, Bronzes, Total_Medals)
  } 
  
  return(athletes_medals %>% arrange(desc(Total_Medals)))
}
```

# Results

We ran simulations for each apparatus for each gender (women's 4 apparatuses and men's 6 apparatuses) 500 times, then outputted the top athletes by medal count per apparatus.

### Female Athletes' Results

For women's apparatuses, we outputted the tables of simulation outcomes for floor exercise because of the high presence of medals for US gymnasts. The table of simulation outcomes for other apparatuses are in the appendix.

```{r FX-womens-sims}
set.seed(123)

fxw_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "FX", "w"))

mu_0 <- fxw_prior_parameters[1]
sig_0 <- fxw_prior_parameters[2]
k_0 <- fxw_prior_parameters[3]
v_0 <- fxw_prior_parameters[4]

FX_w_simul <- simulate_full_competition(combined, "FX", "w", mu_0, sig_0, k_0, v_0, 500)

FX_w_simul |>
  head(10) |>
   mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU")) |>
  kable(caption = "Women's Floor Exercise Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

```{r BB-womens-sims}
set.seed(123)

bbw_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "BB", "w"))

mu_0 <- bbw_prior_parameters[1]
sig_0 <- bbw_prior_parameters[2]
k_0 <- bbw_prior_parameters[3]
v_0 <- bbw_prior_parameters[4]

BB_w_simul <- simulate_full_competition(combined, "BB", "w", mu_0, sig_0, k_0, v_0, 500)

BB_w_table = BB_w_simul |>
  head(10) |>
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU")) |>
  kable(caption = "Women's Balance Beam Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

```{r VT-womens-sims}
set.seed(123)

vtw_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "VT", "w"))

mu_0 <- vtw_prior_parameters[1]
sig_0 <- vtw_prior_parameters[2]
k_0 <- vtw_prior_parameters[3]
v_0 <- vtw_prior_parameters[4]

VT_w_simul <- simulate_full_competition(combined, "VT", "w", mu_0, sig_0, k_0, v_0, 500)
VT_w_table = VT_w_simul |>
  head(10) |>
  mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU")) |>
  kable(caption = "Women's Vault Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

```{r UB-women-sims}
set.seed(123)

ubw_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "UB", "w"))

mu_0 <- ubw_prior_parameters[1]
sig_0 <- ubw_prior_parameters[2]
k_0 <- ubw_prior_parameters[3]
v_0 <- ubw_prior_parameters[4]

UB_w_simul <- simulate_full_competition(combined, "UB", "w", mu_0, sig_0, k_0, v_0, 500)
```

For the women's gymnastics team, we select Simone Biles, Zoe Miller, Shilese Jones, Konnor McClain, and Jade Carey to represent the US at the Paris Olympics. Our rationale for this combination and our framework for optimizing gold medal count, total medal count, and apparatus vs. individual all-around vs. team event wins are explored further in the discussion.

Based on our 500 simulations, Simone Biles has the highest count of total medals in balance beam (170 total medals), floor exercise (328 total medals), and vault (328 total medals), as well as highest gold medal count in floor exercise and vault (186 and 151 gold medals expected of 500 simulations, respectively). Therefore, Biles is expected to be a strong US contender in the individual apparatus events, individual all-around events, as well as a the team all-around since only three members compete in each apparatus for that event. For uneven bars, US athletes Zoe Miller and Shilese Jones come in third (35 gold medals) and fifth place (32 gold medals) respectively. Additionally, Konnor McClain comes second highest for gold medal count for balance beam (65 gold medals) in simulation outcomes, after Yaqin Zhou of China, and Jade Carey comes in third for highest count of total medals (199) and gold medals (61 medals) for vault. Among the simulation results, we generally see the US women gymnasts place very highly in individual apparatuses by both total medal count and gold medal count.

### Male Athletes' Results

For men's apparatuses, we outputted the table of simulation outcomes for parallel bars because of the high presence of medals for US gymnasts relative to the other apparatuses. The tables of simulation outcomes for other apparatuses are in the appendix.

```{r FX-men-sims}
set.seed(123)

fxm_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "FX", "m"))

mu_0 <- fxm_prior_parameters[1]
sig_0 <- fxm_prior_parameters[2]
k_0 <- fxm_prior_parameters[3]
v_0 <- fxm_prior_parameters[4]

FX_m_simul <- simulate_full_competition(combined, "FX", "m", mu_0, sig_0, k_0, v_0, 500)
```

```{r VT-men-sims}
set.seed(123)

vtm_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "VT", "m"))

mu_0 <- vtm_prior_parameters[1]
sig_0 <- vtm_prior_parameters[2]
k_0 <- vtm_prior_parameters[3]
v_0 <- vtm_prior_parameters[4]

VT_m_simul <- simulate_full_competition(combined, "VT", "m", mu_0, sig_0, k_0, v_0, 500)

VT_m_table = VT_m_simul |>
  head(10) |>
  mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Men's Vault Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

```{r PH-men-sims}
set.seed(123)

phm_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "PH", "m"))

mu_0 <- phm_prior_parameters[1]
sig_0 <- phm_prior_parameters[2]
k_0 <- phm_prior_parameters[3]
v_0 <- phm_prior_parameters[4]

PH_m_simul <- simulate_full_competition(combined, "PH", "m", mu_0, sig_0, k_0, v_0, 500)
```

```{r HB-men-sims}
set.seed(123)

hbm_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "HB", "m"))

mu_0 <- hbm_prior_parameters[1]
sig_0 <- hbm_prior_parameters[2]
k_0 <- hbm_prior_parameters[3]
v_0 <- hbm_prior_parameters[4]

HB_m_simul <- simulate_full_competition(combined, "HB", "m", mu_0, sig_0, k_0, v_0, 500)
```

```{r SR-men-sims}
set.seed(123)

srm_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "SR", "m"))

mu_0 <- srm_prior_parameters[1]
sig_0 <- srm_prior_parameters[2]
k_0 <- srm_prior_parameters[3]
v_0 <- srm_prior_parameters[4]

SR_m_simul <- simulate_full_competition(combined, "SR", "m", mu_0, sig_0, k_0, v_0, 500)
```

```{r PB-men-sims}
set.seed(123)

pbm_prior_parameters <- suppressWarnings(fit_normal_priors(combined_apparatus, "PB", "m"))

mu_0 <- pbm_prior_parameters[1]
sig_0 <- pbm_prior_parameters[2]
k_0 <- pbm_prior_parameters[3]
v_0 <- pbm_prior_parameters[4]

PB_m_simul <- simulate_full_competition(combined, "PB", "m", mu_0, sig_0, k_0, v_0, 500)

PB_m_simul |>
  head(10) |>
   mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Men's Parallel Bars Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

For the men's gymnastics team, we select Asher Hong, Curran Phillips, Donnell Whittenburg, Colt Walker, and Brody Malone to represent the US at the Paris Olympics. Our rationale for choosing this combination and optimizing for all-around gymnasts as opposed to event specialists are explored further in the discussion.

We see from our simulation outcomes tables that the US men gymnasts do not come in the top 3 simulated rankings by total medal count for any apparatuses other than Asher Hong in vault, who comes in a simulated second place. As a result, it may not be fruitful to pick individual US male athletes by their apparatus-specific performance, given athletes from other countries are likely to place ahead of them on individual apparatuses. It is worth noting the overlap of US men gymnasts who place in the top 10 of simulated total medals across the apparatuses. Curran Phillips places in sixth in simulated total medals for vault (112 medals) and fourth in simulated total medals for parallel bars (68 medals). Donnell Whittenburg places seventh in simulated total medals for still rings (56 medals), eighth for simulated total medals in floor exercise (43 medals), and seventh for simulated total medals for vault (111 medals). Colt Walker places ninth in simulated vault total medals (85 medals), fifth in parallel bars simulated total medals (67 medals), ninth in floor exercise simulated total medals (40 medals). Lastly, Brody Malone places fourth in simulated high bar total medals (72 medals) and tenth in simulated floor exercise total medals (39 medals). Because we see that these athletes are still able to place well in multiple events, all the apparatuses except for pommel horse are covered with at least one athlete who performs well in it, but who can also place well in other apparatuses.

# Discussion

```{r women-sims-table, include = FALSE}
#LARGE WOMEN'S SIMULATION TABLE W/ ALL POSSIBLE MEDAL METRICS
FX_w_copy <- FX_w_simul
#Creates country variable
FX_w_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", FX_w_copy$unique_id))
#adds medal weight variable
FX_w_copy$Medal_Weight <- (FX_w_copy$Golds*3) + (FX_w_copy$Silvers*2) + (FX_w_copy$Bronzes*1)
#adds apparatus to facet by later on in visuals
FX_w_copy$Apparatus <- "FX"

BB_w_copy <- BB_w_simul
BB_w_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", BB_w_copy$unique_id))
BB_w_copy$Medal_Weight <- (BB_w_copy$Golds*3) + (BB_w_copy$Silvers*2) + (BB_w_copy$Bronzes*1)
BB_w_copy$Apparatus <- "BB"

VT_w_copy <- VT_w_simul
VT_w_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", VT_w_copy$unique_id))
VT_w_copy$Medal_Weight <- (VT_w_copy$Golds*3) + (VT_w_copy$Silvers*2) + (VT_w_copy$Bronzes*1)
VT_w_copy$Apparatus <- "VT"

UB_w_copy <- UB_w_simul
UB_w_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", UB_w_copy$unique_id))
UB_w_copy$Medal_Weight <- (UB_w_copy$Golds*3) + (UB_w_copy$Silvers*2) + (UB_w_copy$Bronzes*1)
UB_w_copy$Apparatus <- "UB"

#Joins all women's medal results table for facet wrapping

tot_w_simul <- bind_rows(FX_w_copy,BB_w_copy, VT_w_copy, UB_w_copy)
tot_w_simul <- tot_w_simul %>% 
  mutate(USA = as.factor(ifelse(Country == "USA", "USA", "nonUSA")))
tot_w_simul
```

```{r mens-sims-table, include = FALSE}
#LARGE MEN'S SIMULATION TABLE W/ ALL POSSIBLE MEDAL METRICS

FX_m_copy <- FX_m_simul
#Creates country variable
FX_m_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", FX_m_copy$unique_id))
#adds medal weight variable
FX_m_copy$Medal_Weight <- (FX_m_copy$Golds*3) + (FX_m_copy$Silvers*2) + (FX_m_copy$Bronzes*1)
#adds apparatus to facet by later on in visuals
FX_m_copy$Apparatus <- "FX"

VT_m_copy <- VT_m_simul
VT_m_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", VT_m_copy$unique_id))
VT_m_copy$Medal_Weight <- (VT_m_copy$Golds*3) + (VT_m_copy$Silvers*2) + (VT_m_copy$Bronzes*1)
VT_m_copy$Apparatus <- "VT"

PH_m_copy <- PH_m_simul
PH_m_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", PH_m_copy$unique_id))
PH_m_copy$Medal_Weight <- (PH_m_copy$Golds*3) + (PH_m_copy$Silvers*2) + (PH_m_copy$Bronzes*1)
PH_m_copy$Apparatus <- "PH"

HB_m_copy <- HB_m_simul
HB_m_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", HB_m_copy$unique_id))
HB_m_copy$Medal_Weight <- (HB_m_copy$Golds*3) + (HB_m_copy$Silvers*2) + (HB_m_copy$Bronzes*1)
HB_m_copy$Apparatus <- "HB"

SR_m_copy <- SR_m_simul
SR_m_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", SR_m_copy$unique_id))
SR_m_copy$Medal_Weight <- (SR_m_copy$Golds*3) + (SR_m_copy$Silvers*2) + (SR_m_copy$Bronzes*1)
SR_m_copy$Apparatus <- "SR"

PB_m_copy <- PB_m_simul
PB_m_copy$Country <- factor(sub(".+_([A-Z]+)", "\\1", PB_m_copy$unique_id))
PB_m_copy$Medal_Weight <- (PB_m_copy$Golds*3) + (PB_m_copy$Silvers*2) + (PB_m_copy$Bronzes*1)
PB_m_copy$Apparatus <- "PB"

#Joins all men's medal results table for facet wrapping

tot_m_simul <- bind_rows(FX_m_copy, VT_m_copy,PH_m_copy, HB_m_copy,SR_m_copy, PB_m_copy)
tot_m_simul <- tot_m_simul %>% 
  mutate(USA = as.factor(ifelse(Country == "USA", "USA", "nonUSA")))
tot_m_simul
```

### Objective 1: Choice of Medal Success Metric (Total Number of Gold Medals)

From the dot plot visualizations of the women's simulation of the three considered success metrics (gold medal count, total medal count, and weighted medal count) for each apparatus by USA and non-USA teams, there looks to be at least one USA athlete that places higher than of all non-USA athletes in each medal metric for each apparatus except uneven bars (Appendix: Image 5). The women's USA team makes up 51% of the total women's gold medals in the simulation which is a higher proportion than the 47% of the total medal count and 48% of the weighted medals (Appendix: Image 7). From the dot plot visualizations of the men's simulation of the three considered success metrics, for each apparatus by USA and non-USA teams, there are non-USA athletes for each apparatus that exceed the USA in each medal success metric (Appendix: Image 6). The men's USA team makes up 24% of the total medal count in the simulation which is a higher proportion than the 21% of the total gold medal count and 23% of the weighted medals. (Appendix: Image 8) When viewing the top 5 most successful female athletes (top 5 most decorated by that medal metric) in each apparatus for each medal success metric, the USA makes a good portion of these athletes. There tend to be 2-4 USA athletes in the top 5 depending on the success metric and apparatus (Appendix: Image 7). When viewing the top 5 most successful male athletes in each apparatus for each medal success metric, there tend to be 0-3 (mostly 0) US male athletes present (Appendix: Image 8).

Considering that US' female athletes tend to enjoy more successes, regardless of metric, than male USA athletes, it is best to prioritize the success metric that the female team performs the best in. Also viewing the male top 5 most decorated athlete by each metric for each apparatus, the men's USA team has a higher proportion of athletes in the top 5 when using the total number of gold medals as a success metric (Appendix: Image 8). Therefore, the success metric that we aim to maximize to best ensure the USA team's success is the total number of gold medals.

### Objective 2: Value of Medals for Each Event Type (Team AA \> Individual AA \> Individual Apparatus)

From the table of the top 10 most decorated gold medal female athletes by apparatus from the simulated data, the USA, China, Brazil, and Great Britain make multiple appearances. The USA has athletes in the top 10 most decorated gold medalists for each apparatus as well as the top 5, but other countries do not (Appendix: Image 9). In this case, valuing the team's all-around medal more than the individual all-around and individual apparatus will hopefully increase medal success in terms of gold medal count. When viewing the top 10 most decorated gold medal female athletes by apparatus, the USA's Simone Biles, appears in the balance beam as first, in floor exercise as first, in uneven bars as ninth, and in vault as first. Valuing the individual all-around events higher also may help team USA increase in our metric of success. Furthermore, since these events are harder to achieve than individual apparatuses because of the multiple sections within the event that need to also meet a standard, it will be harder for other countries to also benefit from this increased value.

From the table of the top 10 most decorated gold medal male athletes by apparatus, the USA, Japan, and China make multiple appearances. The only country that has an athlete in each apparatus for the top 10, is the USA (Appendix: Image 11). It could be beneficial for the men's team to value the team's all-around success more than other events. The US men's team also does not have a well-rounded athlete that places in the top 10 most decorated gold male athletes for each apparatus so we can assume valuing individual all-around successes over the other events would not help the US men's team but it also would not hurt it since other countries also do not have a highly decorated well-rounded competitor.

In the dot plots of the top 5 decorated gold medal female athletes' countries by number of gold medals for each apparatus, US athletes make multiple appearances (Appendix: Image 10). In the dot plots of the top 5 decorated gold medal male athlete's countries by number of gold medals for each apparatus, US athletes are present in multiple apparatuses but not many athletes are well decorated within each apparatus. But in vault there are two US athletes in the top 5 (Appendix: Image 12). Valuing individual apparatus events as regular events of weight 1 would best suit both the male and female teams' success against their competitors. Weighing the team all-around as 3 points is viable because not only do both the men's and women's USA have the potential to win based on this simulation, but there is less reliance  on a single athlete.

### Objective 3: All-Around vs Event Specialist vs Mixture (Women: Even Specialist, Men: Mixture)

In our metric of success, we chose the total count of gold medals and we decided to weigh team all-around events as greater than individual all-around events and individual all-around great than the individual apparatuses. For the women's team, we believe it is best to select a team of five female athletes who are event-specialist gymnasts. The US women's team has a strong shot at winning the individual all-around and many individual apparatus events with multiple-apparatus specialist as well as win team all-around with highly decorated gold medalists who specialize in their apparatus, so focusing on athletes that specialize in apparatuses would be the best strategy (Appendix: Image 10). For the men's team, we believe it is best to select a team of five male athletes who are all-around gymnasts. The top male competitors for each apparatus from Team USA are almost always severely overshadowed by top male competitors from other countries by number of gold medal count. However, in vault the US makes up 7 of the top 10 most decorated gold medalists in the apparatus, so including as vault specialist could help the US men's gymnastics team increase chances of success. (Appendix: Image 12)

### Objective 4: Identifying 5 Athletes

Considering the conclusions of the previous objectives, we predict that the following athletes would best optimize gold medal count success for both the male and female US gymnastics team in the 2024 Paris Summer Olympics:

#### Women's USA Gymnastics Team: Event Specialists Preference

Our Team USA women's selection includes: Simone Biles, Shilese Jones, Zoe Miller, Konnor Mcclain, and Jade Carey.

In our results, we saw that Simone Biles was a strong individual apparatus (particularly in floor exercise, vault, and balance beam), individual all-around, and team all-around top-finisher contender--she is both a specialist and a generalist. To supplement Biles's performance and add strength to the US uneven bars performance, we choose Shilese Jones and Zoe Miller for their strong uneven bars rankings as specialists in the event. Furthermore, we choose Konnor McClain as a specialist in balance beam, as she has more simulated gold medals than does Simone Biles, but she may also compete on vault given fifth overall simulated ranking in vault total medals and fourth overall simulated ranking in vault gold medals. Lastly, Jade Carey we choose as another vault specialist given her third overall simulated ranking in vault, but she may also compete in floor exercise given her sixth overall simulated medal ranking in floor exercise. This selection provides two of the strongest USA specialists by medal count for almost each apparatus besides floor exercise since Simone received a whopping count of 192 gold medals in comparison the second place Brazilian contender with 58 gold medals in the simulation (Appendix: Image 9).

#### Men's USA Gymnastics Team: Mixture of Specialist and All-Around, All-Around Preference

Our Team USA men's selection includes: Asher Hong, Curran Phillips, Donnell Whittenburg, Colt Walker, and Brody Malone.

In order to find the expected best all-around male athletes from the simulation, we gave rankings of total count of gold medals for each apparatus, took the average of those rankings for each athlete and decided to pick the top five athletes with the highest average ranking (Appendix: Image 13), but we will choose Curran Phillips as spot #5 instead of Paul Juda given Curran Phillips places well in vault and parallel bars, representing an all-arounder with additional specialties. This method also matches our simulation results, which shows these five athletes (except for Asher Hong as a vault specialist, yet Asher can also rank high in all-around male athletes) as all-around gymnasts who can place in the top 10 of simulated total medals in at least two apparatuses, and cover all the apparatuses except for pommel horse.

### Methodology and Data Evaluation

The baseline choices in the methodology: taking a Bayesian approach and relying on the Monte Carlo method, allow for generally informed predictions (Yang, et. al 2022, Hoff 2008). However, there are areas where the implementation could be improved. The normal distribution is a simple choice for the posterior, but is not a perfect fit for the data. The normal distribution is unbounded, while gymnastics scores are bounded between 0 and 20. This discrepancy is addressed imperfectly through truncation, while a beta distribution could potentially be a better fit. Furthermore, when determining the prior parameters we use the mean and standard deviation of athlete results in a given apparatus, not accounting for the difference in sample count between athletes. We use a single distribution to model final scores, when we should be sampling from a distribution of difficulty scores, then conditioning on difficulty to sample execution and penalty scores to get a final score. This would allow us to  incorporate the fact that difficulty and execution scores are not independent. Additionally, the simulated competitions include every gymnast in a single round, unlike the actual Olympics. Ideally, we'd simulate the multiple individual and team rounds in a gymnastics competition. The choice to avoid this modelling process, alongside the choice to only run 500 simulations, were done due to computational constraints. Finally, we assume that the athletes' abilities are constant over time, which is not necessarily true. This assumption is mildly addressed by using the most recent data, but it is still a simplification.

We run our model on a subsetted group of observations from 2022-2023 gymnastics competition data; it is likely that this subset is not representative of every athletes' true performances. We had to remove data for athletes' scores when the athlete did not compete in more than 2 competitions for an apparatus, which may have excluded some injured or upcoming athletes Finally, given there are a limited number of international competitions per season, most athletes in the data set were competing in less than ten competitions. The limited number of score results per athlete may lead to hard to generalize results.

### Implications and Conclusions

A development of this study would be benefited if it addressed the methodological limitations mentioned above. Additionally, including more historical data and athletes' age in the model would create a much more robust model. The current methodology also lacks a selection mechanism, relying on us to manually select the top five athletes. Another change that would have advanced the specificity in the vault apparatus scores within our simulations would have been handling vault 1 and vault 2 as separate entities. Within individual apparatus events, two different vaults are required in the qualification and final event but in our simulation we used the mean of both vault events instead. Another change in our methodology would be to run more competition simulations to reduce variance. Overall, this study provides valuable insights on an optimal team selection strategy that would best aid the United States artistic gymnastics male and female team achieve success in the 2024 Paris Summer Olympics Games. 

\newpage

# Appendix

### Works Cited

-   Camenker, Jacob. "How Old Is Simone Biles? Why Elite Olympic Gymnasts Typically Retire at a Young Age." Sporting News, 18 Sept. 2021, www.sportingnews.com/us/athletics/news/simone-biles-retire-age-olympics/1laom4i4u4wh1thcgta4nun2x. Accessed 20 Nov. 2023.

-   Hoff, Peter D. A First Course in Bayesian Statistical Methods. Springer, 2009.

-   Meyers, Dvora. "Time for the End of the Teen Gymnast." FiveThirtyEight, 27 July 2021, fivethirtyeight.com/features/gymnasts-age-olympics/. Accessed 20 Nov. 2023.

-   Muller, Marie Laure Delignette, and Christophe Dutang. "Overview of the Fitdistrplus Package." R-Project, CRAN, 25 Apr. 2023, cran.r-project.org/web/packages/fitdistrplus/vignettes/fitdistrplus_vignette.html.

-   "Paris 2024 Olympic Games: How Do Athletes Qualify?" Olympics, 8 Aug. 2021, olympics.com/en/news/paris-2024-olympic-games-how-do-athletes-qualify. Accessed 20 Nov. 2023.

-   Santos-Fernandez, Edgar, et al. "Bayesian Statistics Meets Sports: A Comprehensive Review." Journal of Quantitative Analysis in Sports, vol. 15, no. 4, Dec. 2019, pp. 289--312. www.degruyter.com, https://doi.org/10.1515/jqas-2018-0106.

-   "Tokyo 2020 Artistic Gymnastics - Olympic Results by Discipline." Olympics, olympics.com/en/olympic-games/tokyo-2020/results/artistic-gymnastics. Accessed 20 Nov. 2023.

-   "UCSAS 2024 USOPC DATA CHALLENGE." UConn Sports Analytics Symposium (UCSAS), statds.org/events/ucsas2024/challenge.html. Accessed 20 Nov. 2023.

-   Wu, Paul Pao-Yen, et. al. (2021) Bayesian prediction of winning times for elite swimming events, Journal of Sports Sciences, 40:1, 24-31, DOI: 10.1080/02640414.2021.1976485


### Data Discussion: Tokyo Olympics

Additionally, in the context of Olympic gymnastics, athletes of age 16 and older are eligible to compete but gymnastics is a sport in which most athletes retire in their early to mid-twenties. Specifically in the summer 2020 Tokyo Olympics only three female athletes aged 27 or older qualified to compete (Camenker, 2021). Furthermore, the average age for female gymnasts in the 2020 Olympics was approximately 22 years of age, meaning we assume that many of the competitors in the older data set will not be competing in the 2024 Paris Summer Olympics (Meyers, 2021).

### Data Cleaning Semantics and Justification

There were several cases of missing or inconsistent athlete first and last names, so we created unique athlete IDs using string methods by using the first three letters of an athlete's first name, the first three letters of an athlete's last name, and the country code. We also manually inserted missing names and accounted for names with less than three characters. Furthermore, the apparatus code for high bar was inconsistent across the Commonwealth Games and all other competitions, so we made sure to consolidate high bar into one apparatus code. Because individual apparatus qualifying vaults needed athletes to compete in two different vaults (VT1, VT2) as opposed to one vault in the finals or team or all-around events, we decided to take the higher of the two vault scores for an athlete for a competition, if there were two vaults completed, and consolidated that score as one vault apparatus code. We decided to keep the higher score given the vaults were different, and athletes likely compete with the vault that gives them the higher score during event finals.

### Additional Simulation Results

Given women compete on 4 apparatuses and men compete on 6 apparatuses, we have tables of the simulation outcomes for all 10 apparatuses.

```{r additional-sims-tables}
#womens additional
BB_w_table
VT_w_table

UB_w_simul |>
  head(10) |>
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU")) |>
  kable(caption = "Women's Uneven Bars Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")

#mens additional
VT_m_table

FX_m_simul |>
  head(10) |>
   mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Men's Floor Exercise Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")

HB_m_simul |>
  head(10) |>
   mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Men's High Bar Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")

PH_m_simul |>
  head(10) |>
   mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Men's Pommel Horse Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")

SR_m_simul |>
  head(10) |>
   mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Men's Still Rings Simulation Results ", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals")) |>
  kable_styling(font_size = 9, latex_options = "HOLD_position")
```

### Extra Visualizations

The following visualizations show the distribution of difficulty and execution scores by apparatus for male and female gymnasts, which are still approximately normal but do show more drastic deviations from normality than do the overall scores for each gymnast at an apparatus in a competition round. So, we thought it would be more fitting to fit normal-inverse gamma priors on the means and variances of the overall scores.

```{r execution-difficulty-distributions}
## GOING INTO APPENDIX
combined |>
  filter(Gender == "w") |>
  ggplot(aes(x = E_Score)) +
  geom_density() +
  facet_wrap(~ Apparatus) +
  labs(title = "Distribution of Female Gymnasts' Execution Scores",
       subtitle = "By Apparatus",
       x = "Execution Score",
       y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))

combined |>
  filter(Gender == "w") |>
  ggplot(aes(x = D_Score)) +
  geom_density() +
  facet_wrap(~ Apparatus) +
    labs(title = "Distribution of Female Gymnasts' Difficulty Scores",
         subtitle = "By Apparatus",
         x = "Difficulty Score",
         y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))

combined |>
  filter(Gender == "m") |>
  ggplot(aes(x = E_Score)) +
  geom_density() +
  facet_wrap(~ Apparatus) +
  labs(title = "Distribution of Male Gymnasts' Execution Scores",
       subtitle = "By Apparatus",
       x = "Execution Score",
       y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))

combined |>
  filter(Gender == "m") |>
  ggplot(aes(x = D_Score)) +
  geom_density() +
  facet_wrap(~ Apparatus) +
    labs(title = "Distribution of Male Gymnasts' Difficulty Scores",
         subtitle = "By Apparatus",
         x = "Difficulty Score",
         y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))
```

The below plots visualize how many unique athletes are competing at each round in a competition, spearated by gender, so that we can understand sample size for when we filter out data.

```{r unique-athletes, message = FALSE, warning = FALSE}
number_athletes |>
  filter(Round %in% AA_team) |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "1) Distribution of Athletes Competed at Competition Rounds",
         subtitle = "All Around or Team All Arounds")

number_athletes |>
  filter(Round == "AAfinal") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "2) Distribution of Athletes Competed at AA Finals")

number_athletes |>
  filter(Round == "final") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "3) Distribution of Athletes Competed at Final Rounds",
         subtitle = "Individual Apparatuses")

ggplot(number_athletes, aes(x = athletes_participated)) +
  geom_histogram() +
  labs(x = "Number of Unique Athletes Competed",
       y = "Frequency",
       title = "4) Distribution of Athletes Competed at Competitions")

```

### Posterior Predictive Checks

Additionally, we look to visualize the effectiveness of the choice of a normal distribution by plotting MLE fitted normals over each apparatus.

```{r}
plot_prior_fits = function (combined, app, g) {
  combined = combined %>%
    filter(Gender == g)
  
  normal_fit = fitdist(combined$Score[combined$Apparatus == app], "norm")
  
  combined %>%
    filter(Apparatus == app) %>%
  ggplot(aes(x = Score)) +
  geom_density() +
  stat_function(fun = dnorm, args = list(normal_fit$estimate[[1]], normal_fit$estimate[[2]]), color = "red", linewidth = 1) +
  labs(title = paste(paste(app), "Total Score Dist. x Normal Prior"),  
       subtitle = "Black = actual, Red = fitted",
       x = "Score",
       y = "Density") +
   theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 7),
        plot.subtitle = element_text(size = 6),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))
}

plot_grid(plot_prior_fits(combined, "FX", "m"),
          plot_prior_fits(combined, "HB", "m"),
          plot_prior_fits(combined, "PB", "m"),
          plot_prior_fits(combined, "PH", "m"),
          plot_prior_fits(combined, "SR", "m"),
          plot_prior_fits(combined, "VT", "m"))
```

And for the female events:

```{r}
plot_grid(plot_prior_fits(combined, "FX", "w"),
          plot_prior_fits(combined, "BB", "w"),
          plot_prior_fits(combined, "UB", "w"),
          plot_prior_fits(combined, "VT", "w"))
```

It is clear that the normal distribution is not perfect and that the true densities are slanted, but it serves as a good approximation for the purposes of this case study. Specifically, our methodology uses an inverse gamma prior on the variance of the normal distribution, which is conjugate to the normal distribution. Below we have inverse gamma distributions plotted for each apparatus over the distributions of individual variances.

```{r}
plot_invgamma = function(combined, app, g) {
    combined = combined %>%
      filter(Apparatus == app, Gender == g) %>%
      group_by(unique_id) %>%
      mutate(variances = sd(Score))
    
    invgamma_fit = fitdist(combined$variances, "invgamma")
    
    combined %>%
      filter(Apparatus == app) %>%
    ggplot(aes(x = variances)) +
    geom_density() +
    stat_function(fun = dinvgamma, args = list(shape = invgamma_fit$estimate[[1]], scale = invgamma_fit$estimate[[2]]), color = "red", linewidth = 1) +
    labs(title = paste(paste(app), "Score Var x Invgamma Prior"),  
         x = "Variance",
         y = "Density") +
     theme_minimal() + 
    theme(legend.position = "none",
          plot.title = element_text(size = 7),  
          plot.subtitle = element_text(size = 6),
          axis.text = element_text(size = 7),
          axis.title = element_text(size = 7))
}

plot_grid(plot_invgamma(combined, "FX", "m"),
          plot_invgamma(combined, "HB", "m"),
          plot_invgamma(combined, "PB", "m"),
          plot_invgamma(combined, "PH", "m"),
          plot_invgamma(combined, "SR", "m"),
          plot_invgamma(combined, "VT", "m"))
```

And for the female events:

```{r}
plot_grid(plot_invgamma(combined, "FX", "w"),
          plot_invgamma(combined, "BB", "w"),
          plot_invgamma(combined, "UB", "w"),
          plot_invgamma(combined, "VT", "w"))
```

Some of these distributions are rather poor, but again, they serve as a good approximation for the purposes of this case study. Lastly we want to compare the actual scores simulated by the posterior predictive distribution to the actual scores observed in the data. We do this by plotting the actual scores against the simulated scores for each apparatus.


```{r}
set.seed(14)
plot_final_preds = function(data_23, app, g) {
  HB_sd = data_23 %>%
    filter(Apparatus == app, Gender == g) %>%
    group_by(unique_id) %>%
    summarise(sd = sd(Score)) %>%
    mutate(sd = ifelse(is.na(sd), 0, sd))
  
  HB_mu = data_23 %>%
    filter(Apparatus == app, Gender == g) %>%
    group_by(unique_id) %>%
    summarise(mu = mean(Score))
    
  normal_mu_fit = fitdist(HB_mu$mu, "norm")
  invgamma_sd_fit = fitdist(HB_sd$sd[HB_sd$sd > 0], "invgamma")
  
  m_0 =  normal_mu_fit$estimate[[1]]
  sig_0 = normal_mu_fit$estimate[[2]]
  k_0 = invgamma_sd_fit$estimate[[1]] 
  v_0 = invgamma_sd_fit$estimate[[2]]
  
  
  simul_data = data_23 %>%
  filter(Apparatus == app, Gender == g) %>%
  group_by(unique_id) %>%
    summarise(mean_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[1],
              sd_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[2],
              observations = n()) %>%
    rowwise() %>%
    mutate(simulated_Score = rnorm(1, mean_estimate, sd_estimate))

  data_23 %>%
    filter(Apparatus == app, Gender == g) %>% 
    group_by(unique_id) %>%
    summarise(mean_score = mean(Score),
              observations = n()) %>%
    filter(observations > 1) %>%
    inner_join(simul_data, by = c("unique_id")) %>%
    ggplot() +
      geom_density(aes(x = mean_score), color = "blue") +
      geom_density(aes(x = simulated_Score), color = "red") +
      labs(title = paste(app, "Simulated Scores"),
           subtitle = "Blue = actual, Red = simulated",
           x = "Score",
           y = "Density") +
     theme_minimal() + 
    theme(legend.position = "none",
          plot.title = element_text(size = 8),  
          plot.subtitle = element_text(size = 7),
          axis.text = element_text(size = 7),
          axis.title = element_text(size = 7))
}
plot_grid(plot_final_preds(combined, "FX", "m"),
          plot_final_preds(combined, "HB", "m"),
          plot_final_preds(combined, "PB", "m"),
          plot_final_preds(combined, "PH", "m"),
          plot_final_preds(combined, "SR", "m"),
          plot_final_preds(combined, "VT", "m"))
```

And for the female events:

```{r}
plot_grid(plot_final_preds(combined, "FX", "w"),
          plot_final_preds(combined, "BB", "w"),
          plot_final_preds(combined, "UB", "w"),
          plot_final_preds(combined, "VT", "w"))
```

Some of the apparatuses have very similar distributions to the simulations whilst others show some variation. Notably, BB simulated scores are very similar to the actual scores. Overall, the simulations present a good approximation of the actual scores.

```{r scoremeans-var, message = FALSE}
# ** Include plot of distribution of score means and variances for a chosen apparatus **

combined_apparatus %>%
  filter(Apparatus == "HB") %>%
  ggplot(aes(x = mean_score)) +
    geom_histogram() +
    geom_vline(xintercept = mean(combined_apparatus$mean_score), color = "red") +
    labs(title = "Distribution of Mean Scores for High Bar",
         x = "Mean Score",
         y = "Count") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))

combined_apparatus %>%
  filter(Apparatus == "HB") %>%
  ggplot(aes(x = var_score)) +
    geom_histogram() +
    geom_vline(xintercept = mean(combined_apparatus$var_score), color = "red") +
    labs(title = "Distribution of Variance Scores for High Bar",
         x = "Variance Score",
         y = "Count") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 8),
        plot.subtitle = element_text(size = 7),
        axis.text = element_text(size = 7),
        axis.title = element_text(size = 7))
```

### Comparing Simulation Results

**Image 5)**

```{r}
#WOMEN'S MEDAL METRICS VISUALS
#Prioritizing Gold Medals
ggplot(data = tot_w_simul, aes(x = USA, y = Golds, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Female Gymnasts' Country by Number of Gold Medals", subtitle = "by Apparatus", y = "Number of Gold Medals") +coord_flip()

#Prioritizing Total Medals
ggplot(data = tot_w_simul, aes(x = USA, y = Total_Medals, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Female Gymnasts' Country by Number of Total Medals", subtitle = "by Apparatus", y = "Number of Total Medals") +coord_flip()

#Prioritizing Weighted Medals
ggplot(data = tot_w_simul, aes(x = USA, y = Medal_Weight, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Female Gymnasts' Country by Medal Weight", subtitle = "by Apparatus", y = "Medal Weight") +coord_flip()
```

**Image 6)**

```{r}
#MEN'S MEDAL METRICS VISUALS
#Prioritizing Gold Medals
ggplot(data = tot_m_simul, aes(x = USA, y = Golds, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Male Gymnasts' Country by Number of Gold Medals", subtitle = "by Apparatus", y = "Number of Gold Medals") +coord_flip()

#Prioritizing Total Medals
ggplot(data = tot_m_simul, aes(x = USA, y = Total_Medals, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Male Gymnasts' Country by Number of Total Medals", subtitle = "by Apparatus", y = "Number of Total Medals") +coord_flip()

#Prioritizing Weighted Medals
ggplot(data = tot_m_simul, aes(x = USA, y = Medal_Weight, color = USA)) + geom_point() + facet_wrap(~Apparatus) + labs(title = "Male Gymnasts' Country by Medal Weight", subtitle = "by Apparatus", y = "Medal Weight") +coord_flip()

```

**Image 7)**

Women:

-   Top 5 athletes by apparatus for each of the 3 success metrics

-   Sum of each of the 3 metrics made by athletes from the US and non-US countries

```{r}
#WOMEN
#Top 5 athletes by apparatus for gold count
tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 5) %>% 
  mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU", unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Top Women's Athletes by Gold Medal Count", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals", "Country", "Medal Weight", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")

#Top 5 athletes by apparatus for total medal count
tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Total_Medals, n = 5) %>% 
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU", unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Top Women's Athletes by Total Medal Count", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals", "Country", "Medal Weight", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")

#Top 5 athletes by apparatus for weighted medal count
tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Medal_Weight, n = 5) %>% 
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU", unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
   kable(caption = "Top Women's Athletes by Weighted Medal Count", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals", "Country", "Medal Weight", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")


#total proportion for each medal metric
tot_w_simul %>% 
  group_by(USA) %>% 
  summarise(sumGolds = sum(Golds),
            sumTotal = sum(Total_Medals),
            sumWeighted = sum(Medal_Weight)) %>% 
  kable(caption = "US Women's Medal Proportion Per Medal Metric", col.names = c("Status", "Sum Total Golds", "Sum Total Medals", "Sum Weighted Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")

```

For the women's simulation when looking at the top 5 athletes by:

-   *Gold Medal Count* for each apparatus there are 10 out of 20 from the US: balance beam (BB): 3, floor exercise (FX): 3, uneven bars (UB): 2, and vault (VT): 2

    -   USA makes up 51% of the total women's gold medals in the simulation.

-   *Total Medal Count* for each apparatus there are 12 out of 20 from the US: balance beam (BB): 3, floor exercise (FX): 4, uneven bars (UB): 1, vault (VT): 4

    -   USA makes up 47% of the total women's medals in the simulation.

-   *Weighted Medal Count* for each apparatus there are 10 out of 20 from the US: balance beam (BB): 3, floor exercise (FX): 2, uneven bars (UB): 1, vault (VT): 4

    -   USA makes up 48% of the weight of women's medals in the simulation.

**Image 8)**

Men:

-   Top 5 athletes by apparatus for each of the 3 success metrics

-   Sum of each of the 3 metrics made by athletes from the US and non-US countries

```{r}
#MEN
#Top 5 athletes by apparatus for gold count
tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 5) %>% 
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU", unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
    kable(caption = "Top Men's Athletes by Gold Medal Count", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals", "Country", "Medal Weight", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")

#Top 5 athletes by apparatus for total medal count
tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Total_Medals, n = 5) %>% 
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU", unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
    kable(caption = "Top Men's Athletes by Total Medal Count", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals", "Country", "Medal Weight", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")

#Top 5 athletes by apparatus for weighted medal count
tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Medal_Weight, n = 5) %>% 
    mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU", unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE")) |>
  kable(caption = "Top Men's Athletes by Weighted Medal Count", col.names = c("Athlete & Country", "Golds", "Silvers", "Bronzes", "Total Medals", "Country", "Medal Weight", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")

#total proportion for each medal metric
tot_m_simul %>% 
  group_by(USA) %>% 
  summarise(sumGolds = sum(Golds),
            sumTot = sum(Total_Medals),
            sumWeighted = sum(Medal_Weight)) %>% 
    kable(caption = "US Men's Medal Proportion Per Medal Metric", col.names = c("Status", "Sum Total Golds", "Sum Total Medals", "Sum Weighted Medals")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

For the men's simulation when looking at the top 5 athletes by:

-   *Gold Medal Count* for each apparatus there are 5 out of 30 from the US: floor exercise (FX): 1, high bar (HB): 1, parallel bars (PB): 1 pommel horse (PH): 0, still rings (SR): 0, vault (VT): 2

    -   USA makes up 21% of the total men's gold medals in the simulation.

-   *Total Medal Count* for each apparatus there are 4 out of 30 from the US: floor exercise (FX): 1, high bar (HB): 1, parallel bars (PB): 0, pommel horse (PH): 0, still rings (SR): 0, vault (VT): 2

    -   USA makes up 24% of the total men's medals in the simulation.

-   *Weighted Medal Count* for each apparatus there are 4 out of 30 from the US: floor exercise (FX): 1, high bar (HB): 1, parallel bars (PB): 0, pommel horse (PH): 0, still rings (SR): 0, vault (VT): 2

    -   USA makes up 23% of the weight of men's medals in the simulation.


**Image 9)** Top ten most successful female gymnast using total gold medal count by apparatus

```{r}
tot_w_simul %>% 
  dplyr::select(unique_id, Golds, Country, Apparatus, USA) |>
  group_by(Apparatus) |>
  slice_max(order_by = Golds, n = 10) |>
   mutate(unique_id = case_when(unique_id == "SimBIL_USA" ~ "Simone Biles: USA",
                               unique_id == "YaqZHO_CHN" ~ "Yaqin Zhou: CHN",
                               unique_id == "KonMCC_USA" ~ "Konnor McClain: USA",
                               unique_id == "UraASH_JPN" ~ "Urara Ashikawa: JPN",
                               unique_id == "QinZHA_CHN" ~ "Qingying Zhang: CHN",
                               unique_id == "SunLEE_USA" ~ "Sunisa Lee: USA",
                               unique_id == "HuaLUO_CHN" ~ "Huan Luo: CHN",
                               unique_id == "SkyBLA_USA" ~ "Skye Blakely: USA",
                               unique_id == "YusOU__CHN" ~ "Yushan Ou: CHN",
                               unique_id == "LeaWON_USA" ~ "Leanne Wong: USA",
                               unique_id == "RebAND_BRA" ~ "Rebeca Andrade: BRA",
                               unique_id == "JesGAD_GBR" ~ "Jessica Gadirova: GBR",
                               unique_id == "KalLIN_USA" ~ "Kaliya Lincoln: USA",
                               unique_id == "JadCAR_USA" ~ "Jade Carey: USA",
                               unique_id == "FlaSAR_BRA" ~ "Flavia Saraiva: BRA",
                               unique_id == "JorCHI_USA" ~ "Jordan Chiles: USA",
                               unique_id == "MarMAG_ITA" ~ "Martina Maggio: ITA",
                               unique_id == "JosROB_USA" ~ "Joscelyn Roberson: USA",
                               unique_id == "ShiJON_USA" ~ "Shilese Jones: USA",
                               unique_id == "OndACH_GBR" ~ "Ondine Achampong: GBR",
                               unique_id == "ShoMIY_JPN" ~ "Shokyo Miyata: JPN",
                               unique_id == "TiaSUM_USA" ~ "Tiana Sumanasekera: USA",
                               unique_id == "KayNEM_ALG" ~ "Kayla Neymour: ALG",
                               unique_id == "QiyQIU_CHN" ~ "Qiyan Qiu: CHN",
                               unique_id == "XiaWEI_CHN" ~ "Xiaoyuan Wei: CHN",
                               unique_id == "AliD A_ITA" ~ "Alice D'Amato: ITA",
                               unique_id == "ZoeMIL_USA" ~ "Zoe Miller: USA",
                               unique_id == "XijTAN_CHN" ~ "Xijing Tang: CHN",
                               unique_id == "EliSEI_GER" ~ "Elisabeth Seitz: GER",
                               unique_id == "SabMAN_ROU" ~ "Sabrina Maneca Voinea: ROU",
                               unique_id == "EmmMAL_GER" ~ "Emma Leonie Malewski: GER",
                               unique_id == "YunLEE_KOR" ~ "Yunseo Lee: KOR",
                               unique_id == "RebDOW_GBR" ~ "Rebecca Downie: GBR")) |>
  kable(caption = "Top 10 Female Athletes Per Apparatus by Gold Medals", col.names = c("Athlete & Country", "Golds", "Country", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

**Image 10)**

```{r echo=FALSE}
#selects top 5 decorated gold medal athletes by apparatus
top10_women <- tot_w_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 5)
ggplot(data = top10_women,aes(x = Country, y =Golds, color = USA, shape = Apparatus)) + geom_point() + facet_wrap(~Apparatus) +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ylim(0, 200) + labs(title = "10) Women: Country of Top 5 Athletes by Number of Gold Medals", subtitle = "by Apparatus", x = "Country ", y = "Number of Gold Medals")
```


**Image 11)** Top ten most successful male gymnast using total gold medal count by apparatus

```{r}
tot_m_simul %>% 
  dplyr::select(unique_id, Golds, Country, Apparatus, USA) %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 10) %>% 
   mutate(unique_id = case_when(unique_id == "CarYUL_PHI" ~ "Carlos Yulo: PHI",
                               unique_id == "ArtDOL_ISR" ~ "Artem Dolgopyat: ISR",
                               unique_id == "RyoDOI_JPN" ~ "Ryosuke Doi: JPN",
                               unique_id == "BohZHA_CHN" ~ "Boheng Zhang: CHN",
                               unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                               unique_id == "DaiHAS_JPN" ~ "Daiki Hashimoto: JPN",
                               unique_id == "KazMIN_JPN" ~ "Kazuki Minami: JPM",
                               unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "NicBAR_ITA" ~ "Nicola Bartolini: ITA",
                               unique_id == "HarHEP_GBR" ~ "Harry Hepworth: GBR",
                               unique_id == "JakJAR_GBR" ~ "Jake Jarman: GBR",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               unique_id == "MaxWHI_GBR" ~ "Max Whitlock: GBR",
                               unique_id == "ChiLEE_TPE" ~ "Chih Lee: TPE",
                               unique_id == "RhyMCC_IRL" ~ "Rhys McClenaghan: IRL",
                               unique_id == "NarKUR_KAZ" ~ "Nariman Kurbanov: KAZ",
                               unique_id == "AhmABU_JOR" ~ "Ahmad Abu Al Soud: JOR",
                               unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "GagKHA_ARM" ~ "Gagik Khachikyan: ARM",
                               unique_id == "ConSHI_CHN" ~ "Cong Shi: CHN",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               unique_id == "MilKAR_KAZ" ~ "Milad Karimi: KAZ",
                               unique_id == "WeiSUN_CHN" ~ "Wei Sun: CHN",
                               unique_id == "ShoKAW_JPN" ~ "Shohei Kawakami: JPN",
                               unique_id == "WeiSU__CHN" ~ "Weide Su: CHN",
                               unique_id == "IliGEO_CYP" ~ "Ilias Georgiou: CYP",
                               unique_id == "ChaLIN_CHN" ~ "Chaopan Lin: CHN",
                               unique_id == "YanLIU_CHN" ~ "Yang Liu: CHN",
                               unique_id == "XinLAN_CHN" ~ "Xingyu Lan: CHN",
                               unique_id == "JinZOU_CHN" ~ "Jingyuan Zou: CHN",
                               unique_id == "ElePET_GRE" ~ "Eleftherious Petrounias: GRE",
                               unique_id == "AdeASI_TUR" ~ "Adem Asil: TUR",
                               unique_id == "HaoYOU_CHN" ~ "Hao You: CHN",
                               unique_id == "SalMAR_ITA" ~ "Salvatore Maresca: ITA",
                               unique_id == "IbrCOL_TUR" ~ "Ibrahim Colak: TUR",
                               unique_id == "NikSIM_AZE" ~ "Nikita Simonov: AZE",
                               unique_id == "LukDAU_GER" ~ "Lukas Dauser: GER",
                               unique_id == "IllKOV_UKR" ~ "Illia Kovtun: UKR",
                               unique_id == "JoeFRA_GBR" ~ "Joe Fraser: GBR",
                               unique_id == "KaiSUG_JPN" ~ "Kaito Sugimoto: JPN",
                               unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               unique_id == "VinHÃ–C_AUT" ~ "Vinzenz HÃ¶ck: AUT",
                               unique_id == "KakTAN_JPN" ~ "Kakeru Tanigawa: JPN",
                               unique_id == "ArtMAR_BRA" ~ "Arthur Mariano: BRA",
                               unique_id == "LorDE _NED" ~ "Loran De Munck: NED",
                               unique_id == "Yu-SHI_TPE" ~ "Yu-Jan Shiao: TPE",
                               unique_id == "HanKIM_KOR" ~ "Hansol Kim: KOR",
                               unique_id == "WilEMA_CAN" ~ "William Emard: CAN",
                               unique_id == "FreRIC_USA" ~ "Frederick Richard USA",
                               unique_id == "JamLEW_GBR" ~ "Jamie Lewis: GBR",
                               unique_id == "DehYIN_CHN" ~ "Dehang Yin: CHN",
                               unique_id == "MahAHM_IRI" ~ "Mahdi Ahmad Kohani: IRI",
                               unique_id == "KamNEL_USA" ~ "Kameron Nelson: USA")) |>
  kable(caption = "Top 10 Male Athletes Per Apparatus by Gold Medals", col.names = c("Athlete & Country", "Golds", "Country", "Apparatus", "Status")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```

\newpage

**Image 12)**

```{r top5-decorated, warning = FALSE}
#selects top 5 decorated gold medal athletes by apparatus
top10_men <- tot_m_simul %>% 
  group_by(Apparatus) %>% 
  slice_max(order_by = Golds, n = 5)
ggplot(data = top10_men,aes(x = Country, y =Golds, color = USA, shape = Apparatus)) + geom_point() + facet_wrap(~Apparatus) +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ylim(0, 100) + labs(title = "12) Men: Country of Top 5 Athletes by Number of Gold Medals", subtitle = "by Apparatus", x = "Country", y = "Number of Gold Medals") +
  theme(axis.text.x = element_text(size = 5, angle = 45, hjust = 1))
```

***Note:*** The excessive number of countries display that there is not much overlap in the top 5 most gold medal decorated athletes on the men's team and therefore the lack of well-rounded gymnasts.

**Image 13)**

Average of total gold medal count ranking by apparatus of all US male gymnasts in ascending order -- lower average rank meaning better results, that is, placing higher in rank. We output this average rank in order to find best all around gymnast for men's team.

```{r}
#ADDS RANK TO EACH MALE ATHLETE FOR EACH APPARATUS BY NUMBER OF GOLD MEDALS
ordered_m_simul <- tot_m_simul %>% 
  arrange(Apparatus, desc(Golds))

ordered_m_simul <- ordered_m_simul %>%
  mutate(Gold_Count_Rank = NA)
ordered_m_simul$Gold_Count_Rank[1] <- 1

for (i in 2:nrow(ordered_m_simul)){
  if ((ordered_m_simul$Apparatus[i] == ordered_m_simul$Apparatus[i-1]) & (ordered_m_simul$Golds[i] == ordered_m_simul$Golds[i-1])) {
    ordered_m_simul$Gold_Count_Rank[i] <- ordered_m_simul$Gold_Count_Rank[i-1]
  } 
  else if ((ordered_m_simul$Apparatus[i] == ordered_m_simul$Apparatus[i-1])) {
    ordered_m_simul$Gold_Count_Rank[i] <- ordered_m_simul$Gold_Count_Rank[i-1]+1
  }
  else {
    ordered_m_simul$Gold_Count_Rank[i] <- 1
  }
}

#AVERAGE OVERALL RANK OF EACH MALE ATHLETE BY NUMBER OF GOLD MEDALS
menGoldRank <- ordered_m_simul %>% 
  dplyr::select(unique_id,Golds,Country,Apparatus,Gold_Count_Rank)

menGoldRank %>% 
  filter(Country == 'USA') %>% 
  group_by(unique_id) %>% 
  summarise(avgRank = mean(Gold_Count_Rank)) %>% 
  arrange(avgRank) %>% 
  head(6) |>
  mutate(unique_id = case_when(unique_id == "PauJUD_USA" ~ "Paul Juda: USA",
                              # unique_id == "YulMOL_USA" ~ "Yul Moldauer: USA",
                               unique_id == "AshHON_USA" ~ "Asher Hong: USA",
                               #unique_id == "DalHAL_USA" ~ "Dallas Hale: USA",
                               #unique_id == "KhoYOU_USA" ~ "Khoi Young: USA",
                               unique_id == "CurPHI_USA" ~ "Curran Phillips: USA",
                               unique_id == "DonWHI_USA" ~ "Donnell Whittenburg: USA",
                               #unique_id == "TayBUR_USA" ~ "Taylor Burkhart: USA",
                               unique_id == "ColWAL_USA" ~ "Colt Walker: USA",
                               #unique_id == "SteNED_USA" ~ "Stephen Nedoroscik: USA",
                               unique_id == "BroMAL_USA" ~ "Brody Malone: USA",
                               #unique_id == "BlaSUN_USA" ~ "Blake Sun: USA",
                               #unique_id == "ShaWIS_USA" ~ "Shane Wiskus: USA",
                               #unique_id == "FreRIC_USA" ~ "Frederick Richard: USA"
                              )) |>
  kable(caption = "Average Overall Rank of USA Male Gymnasts By Number of Gold Medals (Top 6)", col.names = c("Athlete & Country", "Average Rank")) |>
  kable_styling(font_size = 8, latex_options = "HOLD_position")
```
