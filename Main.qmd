---
title: "US Gymnastics Analysis"
author: "Chris, Enzo, Mitchelle, Zoe"
output: 
  pdf_document:
    latex_engine: xelatex
    keep_tex: true
    latex_args: ["-shell-escape"]
geometry: "top=15mm, bottom=15mm, left=15mm, right=15mm"
format: pdf
editor: visual
---

```{r}
#| echo : false
#| label: downloading-packages
#| message: false
#| include: false

library(tidyverse)
library(knitr)
library(stringr)
library(dplyr)
library(invgamma)
library(fitdistrplus)
```

```{r}
#| echo : false
#| label: read-data
#| message: false
#| include: false

#make sure this is forked to github so it's not a local file path
earlydata <- read_csv("Cleaned Data/data_2017_2021.csv")
laterdata <- read_csv("Cleaned Data/data_2022_2023.csv")

#will not be using early dataset because it only contains data about female athletes
early <- earlydata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)

later <- laterdata |>
  drop_na(Score, E_Score, D_Score, Apparatus, Round, Location, Competition, Country, Gender)
```

## Introduction

## Methodology

```{r}
#indonesian gymnast's name is Abiyu RAFI not ABIYURAFI
laterdata <- laterdata |>
  mutate(FirstName = ifelse(LastName == "ABIYURAFI" & FirstName == ".", "Abiyu", FirstName),
    LastName = ifelse(LastName == "ABIYURAFI", "RAFI", LastName),
    Apparatus = if_else(Apparatus == 'hb', 'HB', Apparatus))


laterdata <- laterdata |>
  mutate(firstname_check = ifelse(str_length(FirstName) >= 3, 1, 0),
         lastname_check = ifelse(str_length(LastName) >= 3, 1, 0))

laterdata <- laterdata |>
  mutate(FirstName = ifelse(firstname_check == 0, paste0(FirstName, "_"), FirstName),
         LastName = ifelse(lastname_check == 0, paste0(LastName, "_"), LastName))

#based on string methods -- creating unique athlete IDs
laterdata <- laterdata |>
  mutate(unique_id = paste0(str_sub(FirstName, 1, 3), str_sub(LastName, 1, 3), "_", Country))

#create a vector for AA or team
AA_team <- c("AAfinal", "TeamFinal", "TeamQual", "AAqual")
'%notin%' <- function(x,y)!('%in%'(x,y))

finals_vector <- c("AAfinal", "TeamFinal", "final")
```

```{r quantiling, message = FALSE}
#these quantiles are already grouped by gender and competition, round, apapratus, etc. so no bleeding
quantiled_data <- laterdata |>
  group_by(Gender, Competition, Round, Apparatus) |>
  mutate(quantile_20s = ntile(-Score, 5),
         quantile_10s = ntile(-Score, 10))

#filter out the athletes who have NEVER made it to a final, ever
filtered_data <- quantiled_data |>
  group_by(unique_id) |>
  filter(any(Round == "final" | Round == "TeamFinal" | Round == "AAfinal")) |>
  ungroup()

#summary of number of athletes competed in each competition in each round
number_athletes <- filtered_data |>
  group_by(Competition, Round) |>
  summarise(athletes_participated = n_distinct(unique_id))


# at the oceania continental championships, only 10 unique athletes competed
# every other competition at each round has at minimum 36 athletes competing
#at these final rounds, there are at least 40 athletes in each final, so it's fine
#going to left join to show the number of athletes that participated per round

joined_data <- filtered_data |>
  left_join(number_athletes, by = c("Competition", "Round"))

#now the athletes_participated column = how many athletes competed in it


#this filters out the individual records for ppl who were not in top quantiles at a competition
final_data <- joined_data |>
  filter((athletes_participated <= 100 & quantile_20s == 1) | (athletes_participated > 100 & quantile_10s == 1) | (Competition == "Oceania Continental Championships 2023" & quantile_20s %in% c(1, 2)))

#now let's check the number of unique athletes left
# final_data |>
#   group_by(Country) |>
#   summarise(athletes_left = n_distinct(unique_id))

#there are 679 athletes left in total once we have filtered, USA still has 91 left
```

```{r}
#separating datasets into mens and womens

menFinal <- final_data %>% 
  filter(Gender == 'm')

womenFinal <- final_data %>% 
  filter(Gender == 'w')
```

```{r mens-ranking}
#MENS RANKING SYSTEM

#rank actually shown to be correct here for the early observationsbesides a couple missing ranks
orderMenFinal <- menFinal %>% 
  arrange(Competition, Round, Apparatus, desc(Score)) %>% 
  dplyr::select(unique_id, Gender, Country,Competition, Round,Apparatus, Rank, D_Score, E_Score, Penalty, Score)
```

```{r mens-ordering}
#this ranking works works to individually rank the observations rather than taking into account team/all around sum score rankings since we are aiming to choose best individual atheletes
#also important to note that rankers did not give same scores the same rank, but this will be done in new rank

orderMenFinal <- orderMenFinal %>%
  #initializes newRank column
  mutate(newRank = NA)
#starts with first row as 1 since data already grouped and ordered
orderMenFinal$newRank[1] <- 1
for (i in 2:nrow(orderMenFinal)){
  #ranks for ties of same competition, round, and apparatus
  if ((orderMenFinal$Competition[i] == orderMenFinal$Competition[i-1]) & (orderMenFinal$Round[i] == orderMenFinal$Round[i-1]) & (orderMenFinal$Apparatus[i] == orderMenFinal$Apparatus[i-1]) & (orderMenFinal$Score[i] == orderMenFinal$Score[i-1])) {
    orderMenFinal$newRank[i] <- orderMenFinal$newRank[i-1]
  } 
  #ranks for non ties of same competition, round, and apparatus
  else if ((orderMenFinal$Competition[i] == orderMenFinal$Competition[i-1]) & (orderMenFinal$Round[i] == orderMenFinal$Round[i-1]) & (orderMenFinal$Apparatus[i] == orderMenFinal$Apparatus[i-1])) {
    orderMenFinal$newRank[i] <- orderMenFinal$newRank[i-1]+1
  }
  #ranks for new competition, round, and apparatus
  else {
    orderMenFinal$newRank[i] <- 1
  }
}
```

```{r womens-ranking}
#WOMENS RANKING SYSTEM
orderWomenFinal <- womenFinal %>% 
  arrange(Competition, Round, Apparatus, desc(Score)) %>% 
  dplyr::select(unique_id, Gender, Country,Competition, Round,Apparatus, Rank, D_Score, E_Score, Penalty, Score)
```

```{r womens-ordering, message = FALSE}
#this ranking works works to individually rank the observations rather than taking into account team/all around sum score rankings since we are aiming to choose best individual atheletes
#also important to note that rankers did not give same scores the same rank, but this will be done in new rank
orderWomenFinal <- orderWomenFinal %>%
  mutate(newRank = NA)
orderWomenFinal$newRank[1] <- 1

for (i in 2:nrow(orderWomenFinal)){
  if ((orderWomenFinal$Competition[i] == orderWomenFinal$Competition[i-1]) & (orderWomenFinal$Round[i] == orderWomenFinal$Round[i-1]) & (orderWomenFinal$Apparatus[i] == orderWomenFinal$Apparatus[i-1]) & (orderWomenFinal$Score[i] == orderWomenFinal$Score[i-1])) {
    orderWomenFinal$newRank[i] <- orderWomenFinal$newRank[i-1]
  } 
  else if ((orderWomenFinal$Competition[i] == orderWomenFinal$Competition[i-1]) & (orderWomenFinal$Round[i] == orderWomenFinal$Round[i-1]) & (orderWomenFinal$Apparatus[i] == orderWomenFinal$Apparatus[i-1])) {
    orderWomenFinal$newRank[i] <- orderWomenFinal$newRank[i-1]+1
  }
  else {
    orderWomenFinal$newRank[i] <- 1
  }
}

#concatenating the 2 again
combined_final <- orderMenFinal |>
  full_join(orderWomenFinal)
```

```{r removing-obs, message = FALSE}
#summary stats for each athlete for each apparatus
combined_apparatus <- combined_final |>
  group_by(Apparatus, unique_id, Country, Gender) |>
  summarise(mean_score = mean(Score),
            var_score = var(Score),
            number_obs = n(),
            mean_D = mean(D_Score),
            var_D = var(D_Score),
            mean_E = mean(E_Score),
            var_E = var(E_Score)) |>
  filter(number_obs >= 3)
```

## Simulations

```{r fitting-priors}
fit_normal_priors <- function(data, apparatus, gender) {
  #fitting normal prior for mean scores
  normal_mu_fit = fitdist(data$mean_score, "norm")
  #fitting inv gamma prior for variance of scores
  invgamma_var_fit = fitdist(data$var_score, "invgamma")
  
  m_0 =  normal_mu_fit$estimate[[1]]
  sig_0 = normal_mu_fit$estimate[[2]]
  k_0 = invgamma_var_fit$estimate[[1]] 
  v_0 = invgamma_var_fit$estimate[[2]]

  return(c(m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0))
}
```

```{r simulation-function}
#code for simulations, inspired by STA360/peter hoff textbook

analyze_athlete <- function(athlete_results, m_0, sig_0, k_0, v_0, smc = 1000) {
  n = length(athlete_results)
  ybar = mean(athlete_results)
  var = var(athlete_results)
  
  #NEED TO CHECK THIS BAYESIAN
  k_n = k_0 + n
  v_n = v_0 + n
  m_n = (k_0*m_0 + n*ybar)/k_n
  sig_n = (v_0*sig_0 + (n-1)*var + k_0*n*(ybar - m_0)**2/k_n)/v_n
  sig_sample = mean(rinvgamma(smc, v_n/2, sig_n*v_n/2))
  theta_sample = mean(rnorm(smc, m_n, sqrt(sig_sample/k_n)))
  
  return(c(theta_sample, sig_sample))
}
```

```{r creating-medals}
# So this represents one simulation, we could probably run this like 1000 times and average out the medal counts
simulate_results = function(data, apparatus, gender, m_0, sig_0, k_0, v_0, medals = TRUE) {
  simul_data = data %>%
    filter(Apparatus == apparatus
           , Gender == gender) %>%
    group_by(unique_id) %>%
    summarise(mean_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[1],
              var_estimate = analyze_athlete(Score, m_0 = m_0, sig_0 = sig_0, k_0 = k_0, v_0 = v_0)[2],
              observations = n(), .groups = "keep") %>%
    rowwise() %>%
    mutate(simulated_Score = rnorm(1, mean_estimate, var_estimate)) %>% # Truncate scores > 10
    mutate(simulated_Score = ifelse(simulated_Score > 20, 10, simulated_Score)) %>% # Truncate scores < 0
    mutate(simulated_Score = ifelse(simulated_Score < 0, 0, simulated_Score)) 
  
  if (medals == TRUE) {
    # order by top 3 results and assign gold, silver, bronze
    simul_data = simul_data %>%
      ungroup() %>%
      arrange(desc(simulated_Score)) %>%
      mutate(medal = case_when(row_number() == 1 ~ "Gold",
                               row_number() == 2 ~ "Silver",
                               row_number() == 3 ~ "Bronze",
                               TRUE ~ "NA"))
    
  }
  return(simul_data)
}
```

```{r competition-simulation }
# full competition simulation, gets pretty slow with 1000 simulations
simulate_full_competition = function(data, apparatus, gender, mu_0, sig_0, k_0, v_0, smc) {
  athletes_medals = data %>%
    dplyr::select(unique_id) %>%
    distinct() %>%
    mutate(Golds = 0, Silvers = 0, Bronzes = 0, Total_Medals = 0)
  
  for (i in 1:smc) {    
    big_simul = simulate_results(data, apparatus, gender, mu_0, sig_0, k_0, v_0, TRUE) %>%
      filter(medal != "NA")
    
    big_simul = big_simul %>%
      group_by(unique_id) %>%
      summarise(Golds = sum(medal == "Gold"),
                Silvers = sum(medal == "Silver"),
                Bronzes = sum(medal == "Bronze"),
                Total_Medals = sum(medal != "NA"),
                .groups = "keep") %>%
      ungroup()
    
    athletes_medals = athletes_medals %>%
      left_join(big_simul, by = c("unique_id")) %>%
      mutate(Golds = ifelse(is.na(Golds.y), Golds.x, Golds.y + Golds.x),
             Silvers = ifelse(is.na(Silvers.y), Silvers.x, Silvers.y + Silvers.x),
             Bronzes = ifelse(is.na(Bronzes.y), Bronzes.x, Bronzes.y + Bronzes.x),
             Total_Medals = ifelse(is.na(Total_Medals.y), Total_Medals.x, Total_Medals.y + Total_Medals.x)) %>%
      dplyr::select(unique_id, Golds, Silvers, Bronzes, Total_Medals) %>%
      arrange(desc(Total_Medals))
  } 
  return(athletes_medals)
}
```

## Results

```{r warning = FALSE}
set.seed(123)
# This is how it sort of would work
prior_parameters = suppressWarnings(fit_normal_priors(combined_apparatus, "FX", "w"))
print(prior_parameters)

mu_0 = prior_parameters[1]
sig_0 = prior_parameters[2]
k_0 = prior_parameters[3]
v_0 = prior_parameters[4]

test_simul = simulate_full_competition(combined_final, "FX", "w", mu_0, sig_0, k_0, v_0, 100)
head(test_simul, 10)
```

## Discussion

## Appendix

```{r}
number_athletes |>
  filter(Round %in% AA_team) |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "Distribution of Athletes Competed at Competition Rounds",
         subtitle = "All Around or Team All Arounds")

number_athletes |>
  filter(Round == "AAfinal") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "Distribution of Athletes Competed at AA Finals")

number_athletes |>
  filter(Round == "final") |>
  ggplot(aes(x = athletes_participated)) +
    geom_histogram() +
    facet_wrap(~ Round) +
    labs(x = "Number of Unique Athletes Competed",
         y = "Frequency",
         title = "Distribution of Athletes Competed at Final Rounds",
         subtitle = "Individual Apparatuses")

ggplot(number_athletes, aes(x = athletes_participated)) +
  geom_histogram() +
  labs(x = "Number of Unique Athletes Competed",
       y = "Frequency",
       title = "Distribution of Athletes Competed at Competitions")

```
